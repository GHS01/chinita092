import { GoogleGenerativeAI } from '@google/generative-ai'

// üåê CONFIGURACI√ìN DE API KEYS PARA PRODUCCI√ìN
// Pool de API Keys para rotaci√≥n autom√°tica - Carga desde variables de entorno
const getApiKeysFromEnv = () => {
  const keys = []

  // Cargar API keys desde variables de entorno
  for (let i = 1; i <= 15; i++) {
    const key = process.env[`GEMINI_API_KEY_${i}`]
    if (key && key.trim()) {
      keys.push(key.trim())
    }
  }

  // Fallback a keys hardcodeadas si no hay variables de entorno (desarrollo)
  if (keys.length === 0) {
    console.log('‚ö†Ô∏è No se encontraron API keys en variables de entorno, usando keys por defecto')
    return [
      'AIzaSyAlUIsKYBxfZ4RH3aimq7XBWQtlGcG1fjo', // API Key 1 (original)
      'AIzaSyCFR2kApUeCGSWOf_tkcLe1XH4qgKjDVJ0', // API Key 2
      'AIzaSyBEDtNY0MAWLsHcSn4rObEM_Cp7VdKwDjU', // API Key 3
      'AIzaSyD9zOtMS8Xiymc6AyusRUvhwJh3Xvarssc', // API Key 4
      'AIzaSyCv73IdpI7lkziE6jijFTgbaKOdeKS3Sm4', // API Key 5
      'AIzaSyAPFixQAWKi2M7qDjH1n2QuHH7BeAjyTQ8', // API Key 6
      'AIzaSyCwhRvWvFOfJRMk9qQM2U1fDZaa7_HiB_A', // API Key 7
      'AIzaSyCWQsPEq-D3nJZFdMgsTlxDOweTzPKOTwI', // API Key 8
      'AIzaSyDQdZu9BKU0wthWB5MrLu6jlFqJBjobpPU', // API Key 9
      'AIzaSyDNmqQipY9twB5jLEWrMJHQkKRS0_5bhjw', // API Key 10
      'AIzaSyCpkO5REjtpZhXeMpvIhgh8oY_2X2ABIro', // API Key 11
      'AIzaSyARYabiYzJZ8DfDNJeq8wdjy1T_3UGFAXU', // API Key 12
      'AIzaSyBcYsacd3Ml2wlduHZRzkFzHLtgOcylOhQ', // API Key 13
      'AIzaSyB6vyb1cb7D6u9-ef-y4KZc_8Y82kaWC2M', // API Key 14
      'AIzaSyDKWAZ0FkDd0_5DmGhytiu-lg0mUOdHsXg'  // API Key 15
    ]
  }

  console.log(`‚úÖ Cargadas ${keys.length} API keys desde variables de entorno`)
  return keys
}

const API_KEYS = getApiKeysFromEnv()

// üé≠ PERFILES DE NEGOCIO PREDEFINIDOS
const BUSINESS_PROFILES = {
  general: {
    name: "Representante de Ventas",
    emoji: "üè™",
    greeting_variations: [
      "¬°Hola!",
      "¬°Buenas!",
      "¬°Por supuesto!",
      "¬°Perfecto!",
      "¬°Excelente pregunta!",
      "¬°Claro que s√≠!",
      "¬°Buena elecci√≥n!",
      "¬°Genial!",
      "¬°Muy bien!",
      "¬°Entendido!"
    ],
    tone: "profesional y amigable",
    vocabulary: ["producto", "art√≠culo", "compra", "servicio"],
    style: "Mant√©n un tono profesional pero cercano",
    instructions: "Act√∫a como un representante de ventas profesional y cort√©s. Usa un lenguaje formal pero amigable. Siempre pregunta el nombre del cliente si no lo conoces.",
    identity_type: "representative" // No es due√±o, es representante
  },
  cevicheria: {
    name: "Especialista en Ceviche",
    emoji: "üêü",
    greeting: "amigo/amiga",
    tone: "fresco y apetitoso",
    vocabulary: ["fresquito", "del d√≠a", "mariscos", "pescadito", "sabroso", "jugosito"],
    style: "Habla como un especialista en ceviche peruano aut√©ntico, menciona la frescura de los productos del mar",
    instructions: "Eres un especialista en ceviche peruano apasionado. Enfatiza siempre la FRESCURA de tus productos del mar. Usa expresiones como 'fresquito del d√≠a', 'reci√©n llegado del puerto'. Menciona que tus ceviches son preparados al momento. Siempre pregunta el nombre del cliente para personalizar el servicio.",
    identity_type: "specialist"
  },
  tecnologia: {
    name: "Especialista en Tecnolog√≠a",
    emoji: "üíª",
    greeting: "amigo/amiga",
    tone: "t√©cnico pero accesible",
    vocabulary: ["especificaciones", "caracter√≠sticas", "rendimiento", "tecnolog√≠a", "innovaci√≥n"],
    style: "S√© t√©cnico pero explica de manera sencilla, enf√≥cate en beneficios",
    instructions: "Eres un especialista en tecnolog√≠a que sabe explicar conceptos complejos de manera simple. Enf√≥cate en los BENEFICIOS que la tecnolog√≠a aporta al usuario, no solo en especificaciones t√©cnicas. Usa comparaciones simples. Siempre pregunta el nombre del cliente para brindar asesor√≠a personalizada.",
    identity_type: "specialist"
  },
  deportiva: {
    name: "Especialista Deportivo",
    emoji: "‚öΩ",
    greeting: "campe√≥n/campeona",
    tone: "motivacional y energ√©tico",
    vocabulary: ["entrenar", "rendimiento", "superarte", "meta", "logro", "campe√≥n"],
    style: "S√© motivacional y energ√©tico, inspira al cliente a alcanzar sus metas",
    instructions: "Eres un especialista deportivo motivacional. INSPIRA al cliente a alcanzar sus metas deportivas. Usa frases motivacionales como 'Vamos campe√≥n', 'Tu puedes lograrlo'. Relaciona cada producto con el logro de objetivos deportivos. Siempre pregunta el nombre del cliente para motivarlo personalmente.",
    identity_type: "specialist"
  },
  postres: {
    name: "Especialista en Postres",
    emoji: "üç∞",
    greeting: "dulzura",
    tone: "dulce y tentador",
    vocabulary: ["antojito", "delicioso", "tentador", "dulce", "irresistible", "cremosito"],
    style: "S√© dulce y tentador, haz que los productos suenen irresistibles",
    instructions: "Eres un especialista en postres apasionado que ama endulzar la vida de las personas. Describe los postres de manera SENSORIAL: texturas cremosas, sabores intensos, aromas tentadores. Usa diminutivos cari√±osos como 'tortita', 'dulcecito'. Haz que el cliente sienta antojo. Siempre pregunta el nombre del cliente para hacer recomendaciones personalizadas.",
    identity_type: "specialist"
  },
  restaurante: {
    name: "Chef Especialista",
    emoji: "üçΩÔ∏è",
    greeting: "querido cliente",
    tone: "elegante y gastron√≥mico",
    vocabulary: ["platillo", "especialidad", "sabor", "experiencia culinaria", "exquisito"],
    style: "S√© elegante y describe los sabores de manera apetitosa",
    instructions: "Eres un chef especialista experimentado que ama compartir su pasi√≥n culinaria. Describe cada platillo como una EXPERIENCIA GASTRON√ìMICA: aromas, texturas, combinaciones de sabores. Usa t√©rminos culinarios elegantes pero comprensibles. Recomienda maridajes y combinaciones. Siempre pregunta el nombre del cliente para ofrecer recomendaciones personalizadas seg√∫n sus gustos.",
    identity_type: "specialist"
  },
  farmacia: {
    name: "Farmac√©utico Profesional",
    emoji: "üíä",
    greeting: "estimado/a",
    tone: "profesional y confiable",
    vocabulary: ["medicamento", "tratamiento", "salud", "bienestar", "cuidado"],
    style: "Mant√©n un tono profesional y confiable, enf√≥cate en el bienestar",
    instructions: "Eres un farmac√©utico profesional comprometido con la salud de las personas. Mant√©n siempre un tono PROFESIONAL y CONFIABLE. Enf√≥cate en el bienestar del cliente. Nunca des consejos m√©dicos, solo informaci√≥n sobre productos disponibles. Recomienda consultar al m√©dico cuando sea necesario. Siempre pregunta el nombre del cliente para un servicio personalizado.",
    identity_type: "professional"
  },
  personalizado: {
    name: "Representante Personalizado",
    emoji: "‚úèÔ∏è",
    greeting: "cliente",
    tone: "adaptable",
    vocabulary: ["producto", "servicio"],
    style: "Adapta tu estilo seg√∫n las preferencias del usuario",
    instructions: "Adapta tu personalidad seg√∫n las instrucciones personalizadas del usuario. Siempre pregunta el nombre del cliente sin importar el perfil personalizado configurado.",
    identity_type: "representative"
  }
}

// Modelos a utilizar (en orden de preferencia)
const PRIMARY_MODEL = 'gemini-1.5-flash'
const FALLBACK_MODEL = 'gemini-1.5-flash-8b'

// Gestor de API Keys
class ApiKeyManager {
  constructor() {
    this.apiKeys = API_KEYS
    this.currentIndex = 0
    this.keyStatus = new Map()
    this.keyStats = new Map()

    // Inicializar estado de cada API key
    this.apiKeys.forEach((key, index) => {
      this.keyStatus.set(key, {
        isActive: true,
        isAvailable: true,  // ‚úÖ CR√çTICO: Marcar como disponible por defecto
        lastError: null,
        errorCount: 0,
        lastUsed: null,
        rateLimitUntil: null,
        requestCount: 0,
        successCount: 0
      })
    })

    console.log(`üîë ApiKeyManager inicializado con ${this.apiKeys.length} API keys`)
  }

  // Obtener la siguiente API key disponible
  getNextApiKey() {
    const startIndex = this.currentIndex
    let attempts = 0

    while (attempts < this.apiKeys.length) {
      const currentKey = this.apiKeys[this.currentIndex]
      const status = this.keyStatus.get(currentKey)

      // Verificar si la API key est√° disponible
      if (this.isKeyAvailable(currentKey)) {
        console.log(`üîë Usando API Key ${this.currentIndex + 1}/${this.apiKeys.length}`)
        status.lastUsed = new Date()
        status.requestCount++
        return currentKey
      }

      // Pasar a la siguiente API key
      this.currentIndex = (this.currentIndex + 1) % this.apiKeys.length
      attempts++
    }

    // Si llegamos aqu√≠, todas las API keys est√°n bloqueadas
    console.error('üö® Todas las API keys est√°n bloqueadas o con rate limit')

    // Resetear rate limits si han pasado m√°s de 1 hora
    this.resetExpiredRateLimits()

    // Devolver la primera API key como √∫ltimo recurso
    return this.apiKeys[0]
  }

  // Verificar si una API key est√° disponible
  isKeyAvailable(apiKey) {
    const status = this.keyStatus.get(apiKey)

    if (!status.isActive || !status.isAvailable) {
      return false
    }

    // Verificar rate limit
    if (status.rateLimitUntil && new Date() < status.rateLimitUntil) {
      return false
    }

    // Verificar si tiene demasiados errores recientes
    if (status.errorCount > 5) {
      return false
    }

    return true
  }

  // Marcar API key como bloqueada por rate limit
  markRateLimit(apiKey, durationMinutes = 60) {
    const status = this.keyStatus.get(apiKey)
    if (status) {
      status.rateLimitUntil = new Date(Date.now() + durationMinutes * 60 * 1000)
      console.log(`‚è∞ API Key marcada con rate limit hasta: ${status.rateLimitUntil.toLocaleTimeString()}`)
    }
  }

  // Marcar error en API key
  markError(apiKey, error) {
    const status = this.keyStatus.get(apiKey)
    if (status) {
      status.lastError = error.message
      status.errorCount++

      // Si es error de rate limit, marcar espec√≠ficamente
      if (error.message.includes('429') || error.message.includes('quota')) {
        this.markRateLimit(apiKey)
      }

      // Si es error 403 (API deshabilitada), marcar como no disponible temporalmente
      else if (error.message.includes('403') || error.message.includes('Forbidden') || error.message.includes('SERVICE_DISABLED')) {
        status.isAvailable = false
        console.log(`üö´ API Key marcada como no disponible (API deshabilitada)`)
      }

      console.log(`‚ùå Error en API Key: ${error.message}`)
    }
  }

  // Marcar √©xito en API key
  markSuccess(apiKey) {
    const status = this.keyStatus.get(apiKey)
    if (status) {
      status.successCount++
      status.errorCount = Math.max(0, status.errorCount - 1) // Reducir contador de errores
      status.isAvailable = true // ‚úÖ Restaurar disponibilidad en caso de √©xito
    }
  }

  // Resetear rate limits expirados
  resetExpiredRateLimits() {
    const now = new Date()
    this.keyStatus.forEach((status, key) => {
      if (status.rateLimitUntil && now > status.rateLimitUntil) {
        status.rateLimitUntil = null
        status.errorCount = 0
        status.isAvailable = true // ‚úÖ Restaurar disponibilidad cuando expira rate limit
        console.log(`‚úÖ Rate limit expirado para API Key, reactivando`)
      }
    })
  }

  // Obtener estad√≠sticas de todas las API keys
  getStats() {
    const stats = []
    this.apiKeys.forEach((key, index) => {
      const status = this.keyStatus.get(key)
      stats.push({
        index: index + 1,
        key: key.substring(0, 20) + '...',
        isActive: status.isActive,
        isAvailable: this.isKeyAvailable(key),
        requestCount: status.requestCount,
        successCount: status.successCount,
        errorCount: status.errorCount,
        lastUsed: status.lastUsed,
        rateLimitUntil: status.rateLimitUntil,
        lastError: status.lastError
      })
    })
    return stats
  }
}

export class GeminiService {
  constructor(databaseService = null) {
    // Inicializar el gestor de API keys
    this.apiKeyManager = new ApiKeyManager()
    this.genAI = null // Se inicializar√° din√°micamente
    this.db = databaseService // Referencia a la base de datos para obtener configuraci√≥n

    // Configuraci√≥n de generaci√≥n optimizada
    this.generationConfig = {
      temperature: 0.7,
      topK: 32,
      topP: 0.95,
      maxOutputTokens: 2048,
    }

    // Configuraci√≥n de seguridad
    this.safetySettings = [
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
    ]

    console.log('ü§ñ GeminiService inicializado con sistema multi-API key')
  }

  // Obtener instancia de GoogleGenerativeAI con API key actual
  getGeminiInstance() {
    const currentApiKey = this.apiKeyManager.getNextApiKey()
    return new GoogleGenerativeAI(currentApiKey)
  }

  // üé≠ M√âTODO PARA OBTENER PERFIL DE NEGOCIO
  getBusinessProfile(profileKey) {
    return BUSINESS_PROFILES[profileKey] || BUSINESS_PROFILES.general
  }

  // üé≠ M√âTODO PARA OBTENER TODOS LOS PERFILES DISPONIBLES
  getAllBusinessProfiles() {
    return BUSINESS_PROFILES
  }

  // üß† M√âTODO PARA CONSTRUIR CONTEXTO CONVERSACIONAL MEJORADO
  buildEnhancedConversationContext(recentHistory, customerName) {
    if (!recentHistory || recentHistory.length === 0) return ''

    // Extraer informaci√≥n clave de la conversaci√≥n
    const conversationInsights = this.extractConversationInsights(recentHistory, customerName)

    // Construir contexto narrativo
    let contextText = '\nüß† CONTEXTO CONVERSACIONAL INTELIGENTE:\n'

    // Informaci√≥n del cliente extra√≠da
    if (conversationInsights.customerInfo.length > 0) {
      contextText += `\nüìã INFORMACI√ìN DEL CLIENTE ${customerName.toUpperCase()}:\n`
      conversationInsights.customerInfo.forEach(info => {
        contextText += `- ${info}\n`
      })
    }

    // Productos mencionados previamente
    if (conversationInsights.mentionedProducts.length > 0) {
      contextText += `\nüõçÔ∏è PRODUCTOS MENCIONADOS ANTERIORMENTE:\n`
      conversationInsights.mentionedProducts.forEach(product => {
        contextText += `- ${product}\n`
      })
    }

    // Preferencias detectadas
    if (conversationInsights.preferences.length > 0) {
      contextText += `\nüí° PREFERENCIAS DETECTADAS:\n`
      conversationInsights.preferences.forEach(pref => {
        contextText += `- ${pref}\n`
      })
    }

    // Historial reciente para referencia
    contextText += `\nüí¨ √öLTIMOS INTERCAMBIOS:\n`
    recentHistory.slice(-3).forEach((h, index) => {
      const role = h.role === 'user' ? customerName : 'T√∫'
      contextText += `${index + 1}. ${role}: "${h.message}"\n`
    })

    contextText += `\nüéØ INSTRUCCI√ìN CLAVE: Usa esta informaci√≥n para crear respuestas m√°s naturales y contextuales. Haz referencia a informaci√≥n previa cuando sea relevante, como si realmente recordaras la conversaci√≥n.\n`

    return contextText
  }

  // üé≤ M√âTODO PARA SELECCIONAR VARIACI√ìN DE SALUDO ALEATORIA
  getRandomGreeting(businessProfile) {
    if (businessProfile.greeting_variations && businessProfile.greeting_variations.length > 0) {
      const randomIndex = Math.floor(Math.random() * businessProfile.greeting_variations.length)
      return businessProfile.greeting_variations[randomIndex]
    }
    // Fallback para perfiles antiguos
    return businessProfile.greeting || "¬°Hola!"
  }

  // üß† M√âTODO PARA ANALIZAR SI YA TIENE SUFICIENTE INFORMACI√ìN DEL CLIENTE
  analyzeCustomerInformationSufficiency(recentHistory, currentMessage) {
    if (!recentHistory || recentHistory.length === 0) return { hasSufficientInfo: false, requirements: [] }

    const customerRequirements = []
    const allMessages = recentHistory.map(h => h.message.toLowerCase()).join(' ') + ' ' + currentMessage.toLowerCase()

    // Detectar informaci√≥n espec√≠fica del cliente
    const detectedInfo = {
      purpose: false,        // Para qu√© lo necesita
      location: false,       // D√≥nde va a usar
      specifications: false, // Caracter√≠sticas espec√≠ficas
      preferences: false     // Preferencias del cliente
    }

    // Detectar prop√≥sito/uso - MEJORADO
    if (allMessages.includes('ducha') || allMessages.includes('ba√±o') ||
        allMessages.includes('mampara') || allMessages.includes('ventana') ||
        allMessages.includes('puerta') || allMessages.includes('mesa') ||
        allMessages.includes('renovar') || allMessages.includes('cambiar') ||
        allMessages.includes('reemplazar') || allMessages.includes('instalar') ||
        allMessages.includes('necesito') || allMessages.includes('quiero') ||
        allMessages.includes('busco') || allMessages.includes('para')) {
      detectedInfo.purpose = true
      customerRequirements.push('Prop√≥sito/uso identificado')
    }

    // Detectar especificaciones t√©cnicas - MEJORADO PARA PRIVACIDAD
    if (allMessages.includes('resistencia') || allMessages.includes('seguridad') ||
        allMessages.includes('transparencia') || allMessages.includes('templado') ||
        allMessages.includes('grosor') || allMessages.includes('medida') ||
        allMessages.includes('privacidad') || allMessages.includes('privado') ||
        allMessages.includes('opaco') || allMessages.includes('esmerilado') ||
        allMessages.includes('transparente') || allMessages.includes('claro') ||
        allMessages.includes('laminado') || allMessages.includes('decorativo') ||
        allMessages.includes('colores') || allMessages.includes('espesor') ||
        allMessages.includes('aislamiento') || allMessages.includes('t√©rmico') ||
        allMessages.includes('ac√∫stico') || allMessages.includes('ruido')) {
      detectedInfo.specifications = true
      customerRequirements.push('Especificaciones t√©cnicas mencionadas')
    }

    // Detectar preferencias del cliente - NUEVO
    if (allMessages.includes('econ√≥mico') || allMessages.includes('barato') ||
        allMessages.includes('calidad') || allMessages.includes('mejor') ||
        allMessages.includes('recomendaci√≥n') || allMessages.includes('recomiendas') ||
        allMessages.includes('sugieres') || allMessages.includes('aconsejable') ||
        allMessages.includes('recomendar√≠as') || allMessages.includes('ideal')) {
      detectedInfo.preferences = true
      customerRequirements.push('Preferencias del cliente identificadas')
    }

    // Detectar ubicaci√≥n/contexto
    if (allMessages.includes('jacuzzi') || allMessages.includes('jacuzzy') ||
        allMessages.includes('vapor') || allMessages.includes('agua') ||
        allMessages.includes('humedad') || allMessages.includes('exterior')) {
      detectedInfo.location = true
      customerRequirements.push('Contexto de uso identificado')
    }

    // Determinar si tiene suficiente informaci√≥n - L√ìGICA MEJORADA
    const infoCount = Object.values(detectedInfo).filter(Boolean).length
    const hasSufficientInfo = infoCount >= 2 || // Al menos 2 tipos de informaci√≥n
                             (detectedInfo.purpose && detectedInfo.specifications) || // Prop√≥sito + especificaciones
                             (detectedInfo.location && detectedInfo.specifications) || // Ubicaci√≥n + especificaciones
                             (detectedInfo.preferences && detectedInfo.specifications) // Preferencias + especificaciones

    return {
      hasSufficientInfo,
      requirements: customerRequirements,
      detectedInfo,
      infoCount
    }
  }

  // üéØ M√âTODO PARA FILTRAR PRODUCTOS INTELIGENTEMENTE BASADO EN ESPECIFICACIONES
  filterProductsBySpecifications(inventory, recentHistory, currentMessage) {
    const allMessages = recentHistory.map(h => h.message.toLowerCase()).join(' ') + ' ' + currentMessage.toLowerCase()
    const relevantProducts = []

    // Palabras clave para diferentes tipos de vidrio
    const privacyKeywords = ['privacidad', 'privado', 'opaco', 'esmerilado', 'ocultar', 'intimidad']
    const securityKeywords = ['seguridad', 'resistente', 'templado', 'laminado', 'protecci√≥n', 'fuerte']
    const decorativeKeywords = ['decorativo', 'colores', 'dise√±o', 'est√©tico', 'bonito', 'elegante']
    const transparentKeywords = ['transparente', 'claro', 'cristalino', 'ver', 'vista', 'luz']
    const thermalKeywords = ['t√©rmico', 'aislamiento', 'temperatura', 'fr√≠o', 'calor', 'energ√≠a']
    const acousticKeywords = ['ac√∫stico', 'ruido', 'sonido', 'silencio', 'aislante']

    // Analizar qu√© tipo de especificaciones menciona el cliente
    const clientNeeds = {
      privacy: privacyKeywords.some(keyword => allMessages.includes(keyword)),
      security: securityKeywords.some(keyword => allMessages.includes(keyword)),
      decorative: decorativeKeywords.some(keyword => allMessages.includes(keyword)),
      transparent: transparentKeywords.some(keyword => allMessages.includes(keyword)),
      thermal: thermalKeywords.some(keyword => allMessages.includes(keyword)),
      acoustic: acousticKeywords.some(keyword => allMessages.includes(keyword))
    }

    // Filtrar productos del inventario bas√°ndose en las necesidades
    for (const product of inventory) {
      const productName = product.nombre.toLowerCase()
      const productDesc = (product.descripcion || '').toLowerCase()
      const productText = productName + ' ' + productDesc

      let relevanceScore = 0
      let reasons = []

      // Evaluar relevancia para privacidad
      if (clientNeeds.privacy) {
        if (productText.includes('esmerilado') || productText.includes('opaco') ||
            productText.includes('laminado') || productText.includes('privacidad')) {
          relevanceScore += 10
          reasons.push('Ideal para privacidad')
        }
      }

      // Evaluar relevancia para seguridad
      if (clientNeeds.security) {
        if (productText.includes('templado') || productText.includes('laminado') ||
            productText.includes('seguridad') || productText.includes('resistente')) {
          relevanceScore += 8
          reasons.push('Ofrece mayor seguridad')
        }
      }

      // Evaluar relevancia para decoraci√≥n
      if (clientNeeds.decorative) {
        if (productText.includes('decorativo') || productText.includes('colores') ||
            productText.includes('dise√±o') || productText.includes('esmerilado')) {
          relevanceScore += 6
          reasons.push('Opci√≥n decorativa')
        }
      }

      // Evaluar relevancia para transparencia
      if (clientNeeds.transparent) {
        if (productText.includes('transparente') || productText.includes('claro') ||
            productText.includes('cristal') || productText.includes('simple')) {
          relevanceScore += 7
          reasons.push('M√°xima transparencia')
        }
      }

      // Si el producto tiene alguna relevancia, agregarlo
      if (relevanceScore > 0) {
        relevantProducts.push({
          ...product,
          relevanceScore,
          reasons
        })
      }
    }

    // Ordenar por relevancia (mayor score primero)
    relevantProducts.sort((a, b) => b.relevanceScore - a.relevanceScore)

    return {
      filteredProducts: relevantProducts.slice(0, 3), // Top 3 m√°s relevantes
      clientNeeds,
      totalRelevant: relevantProducts.length
    }
  }

  // üîç M√âTODO PARA EXTRAER INSIGHTS DE LA CONVERSACI√ìN
  extractConversationInsights(recentHistory, customerName) {
    const insights = {
      customerInfo: [],
      mentionedProducts: [],
      preferences: []
    }

    recentHistory.forEach(entry => {
      if (entry.role === 'user') {
        const message = entry.message.toLowerCase()

        // Detectar informaci√≥n personal compartida
        if (message.includes('mi perro') || message.includes('mi perrito')) {
          const petMatch = message.match(/mi perr[oa] se llama (\w+)|mi perr[oa] (\w+)/i)
          if (petMatch) {
            const petName = petMatch[1] || petMatch[2]
            insights.customerInfo.push(`Tiene un perro llamado ${petName}`)
          }
        }

        if (message.includes('vivo en') || message.includes('soy de')) {
          const locationMatch = message.match(/vivo en (\w+)|soy de (\w+)/i)
          if (locationMatch) {
            const location = locationMatch[1] || locationMatch[2]
            insights.customerInfo.push(`Vive en ${location}`)
          }
        }

        // Detectar preferencias
        if (message.includes('me gusta') || message.includes('prefiero')) {
          insights.preferences.push(`Expres√≥: "${entry.message}"`)
        }

        if (message.includes('privacidad')) {
          insights.preferences.push('Busca productos para privacidad')
        }

        if (message.includes('vidrio') || message.includes('ventana')) {
          insights.mentionedProducts.push('Interesado en vidrios para ventanas')
        }
      }
    })

    return insights
  }

  // üé≠ M√âTODO PARA GENERAR PROMPT PERSONALIZADO SEG√öN PERFIL
  async getPersonalizedPrompt(basePrompt, businessProfile = null) {
    if (!businessProfile) {
      const profileKey = await this.db.getConfig('business_profile') || 'general'
      console.log(`üé≠ PERFIL CARGADO DESDE DB: ${profileKey}`)
      businessProfile = this.getBusinessProfile(profileKey)
    }

    // üÜï OBTENER CONFIGURACI√ìN DE IDENTIDAD DEL REPRESENTANTE
    const useRepresentativeIdentity = await this.db.getConfig('use_representative_identity') === 'true'
    const representativeName = await this.db.getConfig('representative_name') || ''
    const representativeRole = await this.db.getConfig('representative_role') || ''

    console.log(`üé≠ APLICANDO PERFIL: ${businessProfile.name} ${businessProfile.emoji}`)
    console.log(`üé≠ VOCABULARIO: ${businessProfile.vocabulary.join(', ')}`)
    console.log(`üé≠ TONO: ${businessProfile.tone}`)

    // Si es perfil personalizado, obtener instrucciones personalizadas
    let customInstructions = ''
    if (businessProfile.name === 'Personalizado') {
      const customProfile = await this.db.getConfig('custom_business_profile')
      console.log(`üé≠ PERFIL PERSONALIZADO RAW: ${customProfile}`)
      if (customProfile) {
        try {
          const parsed = JSON.parse(customProfile)

          // üéØ SOBRESCRIBIR DATOS DEL PERFIL CON LOS PERSONALIZADOS
          if (parsed.name) businessProfile.name = parsed.name
          if (parsed.emoji) businessProfile.emoji = parsed.emoji
          if (parsed.greeting) businessProfile.greeting = parsed.greeting
          if (parsed.tone) businessProfile.tone = parsed.tone
          if (parsed.vocabulary) {
            // Procesar vocabulario personalizado
            if (typeof parsed.vocabulary === 'string') {
              businessProfile.vocabulary = parsed.vocabulary.split(',').map(word => word.trim())
            } else if (Array.isArray(parsed.vocabulary)) {
              businessProfile.vocabulary = parsed.vocabulary
            }
          }

          customInstructions = parsed.instructions || businessProfile.instructions
          console.log(`üé≠ PERFIL PERSONALIZADO APLICADO:`)
          console.log(`   - Nombre: ${businessProfile.name}`)
          console.log(`   - Emoji: ${businessProfile.emoji}`)
          console.log(`   - Saludo: ${businessProfile.greeting}`)
          console.log(`   - Tono: ${businessProfile.tone}`)
          console.log(`   - Vocabulario: ${businessProfile.vocabulary.join(', ')}`)
          console.log(`   - Instrucciones: ${customInstructions}`)
        } catch (error) {
          console.error('üö® Error parseando perfil personalizado:', error)
          customInstructions = businessProfile.instructions
        }
      }
    }

    const personalizedPrompt = `${basePrompt}

üé≠ ¬°TRANSFORMACI√ìN OBLIGATORIA DE PERSONALIDAD!
ERES AHORA UN ${businessProfile.name.toUpperCase()} ${businessProfile.emoji} AUT√âNTICO DE PER√ö

ÔøΩ INSTRUCCIONES IMPERATIVAS - DEBES CUMPLIR AL 100%:

1Ô∏è‚É£ PERSONALIDAD OBLIGATORIA:
   - Eres un ${businessProfile.name} peruano PROFESIONAL y apasionado por tu trabajo
   - NUNCA digas que eres un "agente" o "asistente"
   - Habla como un ${businessProfile.identity_type === 'professional' ? 'PROFESIONAL' : businessProfile.identity_type === 'specialist' ? 'ESPECIALISTA' : 'REPRESENTANTE'} del negocio, con orgullo, pasi√≥n y FORMALIDAD
   - Mant√©n SIEMPRE un nivel de comunicaci√≥n profesional y educado
   ${useRepresentativeIdentity && representativeName ?
     `- Te llamas ${representativeName}${representativeRole ? ` y eres ${representativeRole}` : ''}` :
     '- NO inventes nombres propios ni te presentes con identidades espec√≠ficas'}

2Ô∏è‚É£ VOCABULARIO ESPEC√çFICO - USA ESTAS PALABRAS CON ELEGANCIA:
   ${businessProfile.vocabulary && businessProfile.vocabulary.length > 0 ? businessProfile.vocabulary.map(word => `"${word}"`).join(', ') : 'vocabulario profesional'}
   - Usa 1-2 de estas palabras de forma NATURAL y PROFESIONAL
   - Integra el vocabulario espec√≠fico sin sonar vulgar o de mercado

3Ô∏è‚É£ TONO DE VOZ OBLIGATORIO:
   - ${businessProfile.tone} pero SIEMPRE PROFESIONAL
   - Mant√©n este tono en TODA la conversaci√≥n
   - NUNCA uses lenguaje de vendedor de mercado o barrio

4Ô∏è‚É£ FORMA DE DIRIGIRTE AL CLIENTE:
   - VAR√çA tus saludos usando estas opciones naturales: ${businessProfile.greeting_variations ? businessProfile.greeting_variations.join(', ') : this.getRandomGreeting(businessProfile)}
   - NUNCA uses siempre el mismo saludo repetitivo como "Estimado cliente, entiendo que..."
   - S√© c√°lido, profesional y educado
   - NUNCA uses jerga o lenguaje informal excesivo

5Ô∏è‚É£ COMPORTAMIENTO ESPEC√çFICO:
   ${customInstructions || businessProfile.instructions}

6Ô∏è‚É£ REGLA CR√çTICA DEL NOMBRE:
   - SIEMPRE pregunta el nombre si no lo conoces
   - Es obligatorio para personalizar el servicio

üéØ EJEMPLO DE C√ìMO DEBES RESPONDER PROFESIONALMENTE:
Si eres cevicheria: "Estimado ${businessProfile.greeting}, en Marina Mora nos especializamos en mariscos fresquitos del d√≠a. Nuestras categor√≠as incluyen..."
Si eres tecnolog√≠a: "Estimado ${businessProfile.greeting}, en nuestra tienda ofrecemos tecnolog√≠a de √∫ltima generaci√≥n. Nuestras categor√≠as incluyen..."

‚ö†Ô∏è PROHIBIDO ABSOLUTO:
- NO uses lenguaje vulgar o de mercado de barrio
- NO inventes productos que no existen en el inventario
- NO seas demasiado informal o corriente
- NO hagas mensajes excesivamente largos
- NUNCA menciones productos espec√≠ficos sin verificar el inventario

üéØ REGLAS DE COMUNICACI√ìN PROFESIONAL:
- Mant√©n mensajes BREVES y CONCISOS (m√°ximo 3-4 l√≠neas)
- Usa un lenguaje EDUCADO y PROFESIONAL
- Menciona solo categor√≠as REALES del inventario
- S√© espec√≠fico del negocio pero ELEGANTE

RECUERDA: Eres un ${businessProfile.name} peruano PROFESIONAL y EDUCADO, NO un vendedor de mercado.`

    return personalizedPrompt
  }

  // Funci√≥n para obtener modelo con fallback y rotaci√≥n de API keys
  async getModel(modelName = PRIMARY_MODEL, apiKey = null) {
    try {
      // Si no se proporciona API key, obtener una del pool
      if (!apiKey) {
        apiKey = this.apiKeyManager.getNextApiKey()
      }

      const genAI = new GoogleGenerativeAI(apiKey)
      const model = genAI.getGenerativeModel({
        model: modelName,
        generationConfig: this.generationConfig,
        safetySettings: this.safetySettings
      })

      return { model, apiKey }
    } catch (error) {
      console.warn(`Error obteniendo modelo ${modelName} con API key:`, error.message)

      // Marcar error en la API key
      if (apiKey) {
        this.apiKeyManager.markError(apiKey, error)
      }

      // Intentar con modelo fallback si es el modelo primario
      if (modelName === PRIMARY_MODEL) {
        console.log('Intentando con modelo fallback...')
        return this.getModel(FALLBACK_MODEL, apiKey)
      }

      throw error
    }
  }

  // Funci√≥n para ejecutar con reintentos, timeout y rotaci√≥n de API keys
  async executeWithRetry(operation, maxRetries = 3) {
    let lastError = null
    let currentApiKey = null

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Intento ${attempt}/${maxRetries}`)

        // Obtener nueva API key y modelo en cada intento
        const { model, apiKey } = await this.getModel()
        currentApiKey = apiKey
        console.log(`üîë Usando API Key ${this.apiKeyManager.currentIndex + 1}/${this.apiKeyManager.apiKeys.length}`)

        // Ejecutar con timeout de 30 segundos
        const result = await Promise.race([
          operation(model, apiKey),
          new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Timeout: La operaci√≥n tard√≥ demasiado')), 30000)
          )
        ])

        // Marcar √©xito en la API key
        this.apiKeyManager.markSuccess(currentApiKey)

        return result
      } catch (error) {
        lastError = error
        console.warn(`‚ùå Error en intento ${attempt}:`, error.message)

        // Marcar error en la API key actual
        if (currentApiKey) {
          this.apiKeyManager.markError(currentApiKey, error)
        }

        // Si es error de rate limit, cuota, o API deshabilitada, intentar con otra API key
        if (
          error.message.includes('429') ||
          error.message.includes('quota') ||
          error.message.includes('overloaded') ||
          error.message.includes('RESOURCE_EXHAUSTED') ||
          error.message.includes('403') ||
          error.message.includes('Forbidden') ||
          error.message.includes('SERVICE_DISABLED')
        ) {
          if (attempt < maxRetries) {
            if (error.message.includes('429') || error.message.includes('quota')) {
              console.log(`üîë Rate limit detectado, rotando a siguiente API key...`)
            } else if (error.message.includes('403') || error.message.includes('Forbidden')) {
              console.log(`üîë API Key deshabilitada detectada, rotando a siguiente API key...`)
            } else {
              console.log(`üîë Error de servicio detectado, rotando a siguiente API key...`)
            }
            // No hacer delay, rotar inmediatamente a la siguiente API key
            continue
          }
        }

        // Para errores de timeout, reintentar con delay
        if (error.message.includes('Timeout') || error.message.includes('500') || error.message.includes('503')) {
          if (attempt < maxRetries) {
            const delay = 1000 * Math.pow(2, attempt - 1)
            console.log(`‚è∞ Esperando ${delay}ms antes del siguiente intento...`)
            await new Promise(resolve => setTimeout(resolve, delay))
            continue
          }
        }

        // Para otros errores, no reintentar
        break
      }
    }

    // Si llegamos aqu√≠, todos los intentos fallaron
    console.error('üö® Todos los intentos fallaron:', lastError)

    // Mostrar estad√≠sticas de API keys para debugging
    console.log('üìä Estado actual de API keys:', this.getApiKeyStats())

    throw new Error(
      'El servicio de IA est√° temporalmente sobrecargado en todas las API keys. ' +
      'Por favor, intenta de nuevo en unos minutos. ü§ñ'
    )
  }

  // Obtener estad√≠sticas de API keys
  getApiKeyStats() {
    return this.apiKeyManager.getStats()
  }

  async generateSalesResponse(message, customerName, inventory, conversationState = 'initial', recentHistory = []) {
    console.log(`üé≠ INICIANDO generateSalesResponse para: ${customerName}`)
    const operation = async (model, apiKey) => {
      const inventoryText = inventory.map(product =>
        `- ${product.nombre}: S/ ${product.precio} (Stock: ${product.stock}) - ${product.descripcion}`
      ).join('\n')

      // üß† CONTEXTO CONVERSACIONAL MEJORADO
      const historyContext = recentHistory.length > 0
        ? this.buildEnhancedConversationContext(recentHistory, customerName)
        : ''

      // üéØ AN√ÅLISIS DE SUFICIENCIA DE INFORMACI√ìN
      const infoAnalysis = this.analyzeCustomerInformationSufficiency(recentHistory, message)
      let recommendationContext = ''
      let filteredInventoryText = inventoryText

      if (infoAnalysis.hasSufficientInfo) {
        // üéØ FILTRAR PRODUCTOS INTELIGENTEMENTE
        const productFilter = this.filterProductsBySpecifications(inventory, recentHistory, message)

        if (productFilter.filteredProducts.length > 0) {
          // Usar productos filtrados para la recomendaci√≥n
          filteredInventoryText = productFilter.filteredProducts.map(product =>
            `- ${product.nombre}: S/ ${product.precio} (Stock: ${product.stock}) - ${product.descripcion} [RECOMENDADO: ${product.reasons.join(', ')}]`
          ).join('\n')

          recommendationContext = `
üéØ INFORMACI√ìN SUFICIENTE DETECTADA:
- El cliente ya proporcion√≥: ${infoAnalysis.requirements.join(', ')}
- PRODUCTOS FILTRADOS: Se encontraron ${productFilter.filteredProducts.length} productos espec√≠ficamente relevantes
- INSTRUCCI√ìN CR√çTICA: RECOMIENDA ESPEC√çFICAMENTE estos productos filtrados que aparecen como [RECOMENDADO].
- Usa frases como "Te recomiendo...", "Para tu caso espec√≠fico...", "Bas√°ndome en lo que me comentas..."
- Explica POR QU√â cada producto es ideal para su situaci√≥n espec√≠fica.
- NO hagas m√°s preguntas, da recomendaciones directas.`
        } else {
          recommendationContext = `
üéØ INFORMACI√ìN SUFICIENTE DETECTADA:
- El cliente ya proporcion√≥: ${infoAnalysis.requirements.join(', ')}
- INSTRUCCI√ìN CR√çTICA: NO hagas m√°s preguntas. RECOMIENDA productos espec√≠ficos del inventario que cumplan con sus requisitos.
- Usa frases como "Te recomiendo...", "Para tu caso espec√≠fico...", "Bas√°ndome en lo que me comentas..."
- S√© espec√≠fico sobre qu√© productos del inventario son ideales para su situaci√≥n.`
        }
      }

      // Obtener el nombre del negocio desde la configuraci√≥n
      let businessName = 'nuestra tienda'
      if (this.db) {
        try {
          const configuredBusinessName = await this.db.getConfig('business_name')
          if (configuredBusinessName && configuredBusinessName.trim() !== '') {
            businessName = configuredBusinessName
          }
        } catch (error) {
          console.log('‚ö†Ô∏è No se pudo obtener business_name, usando valor por defecto')
        }
      }

      // üé≠ GENERAR PROMPT PERSONALIZADO SEG√öN PERFIL DE NEGOCIO
      const basePrompt = `
Eres un agente de ventas inteligente para ${businessName} en Per√∫. Tu trabajo es ayudar a los clientes de manera natural y profesional.

INFORMACI√ìN DEL NEGOCIO:
- Nombre del negocio: ${businessName}
- Siempre menciona el nombre del negocio cuando sea apropiado en la conversaci√≥n

üéØ INSTRUCCIONES PARA RESPUESTAS NATURALES:
- Solo aceptamos pagos por YAPE (no tarjetas de cr√©dito)
- El cliente debe enviar captura de pantalla del pago por Yape
- S√© PROFESIONAL y EDUCADO, pero NATURAL y CONVERSACIONAL
- Usa emojis apropiados para hacer la conversaci√≥n m√°s amigable
- NO crees pedidos autom√°ticamente por respuestas vagas como "Si", "Ok", "Bien"
- NUNCA inventes productos que no est√°n en el inventario
- Mant√©n respuestas BREVES y CONCISAS (m√°ximo 3-4 l√≠neas)

üß† CLAVE PARA NATURALIDAD:
- EVITA frases repetitivas como "¬°Hola estimado cliente!" al inicio
- VAR√çA tus saludos y formas de dirigirte al cliente
- USA la informaci√≥n del contexto conversacional para crear continuidad
- HAZ referencia a informaci√≥n previa cuando sea relevante
- RESPONDE como si realmente recordaras la conversaci√≥n anterior

INVENTARIO ACTUAL:
${filteredInventoryText}

ESTADO ACTUAL DE CONVERSACI√ìN: ${conversationState}
${historyContext}
${recommendationContext}

üîç INSTRUCCIONES ESPEC√çFICAS SEG√öN TIPO DE CONSULTA:

üìö SI EL CLIENTE BUSCA INFORMACI√ìN (no quiere comprar a√∫n):
- Responde informativamente sobre caracter√≠sticas, beneficios y utilidad
- Explica para qu√© sirve el producto y sus ventajas
- NO preguntes cantidad ni asumas que quiere comprar
- Mant√©n un tono educativo y profesional
- Al final, pregunta si necesita m√°s informaci√≥n o si le interesa adquirirlo

üõí SI EL CLIENTE QUIERE COMPRAR:
- Pregunta cantidad y confirma detalles
- Procede con el proceso de venta normal
- Muestra entusiasmo por la compra

üìã OTRAS SITUACIONES:
1. Si es la primera interacci√≥n (initial), saluda y muestra productos disponibles
2. Si el cliente muestra inter√©s general, pregunta qu√© producto espec√≠fico le interesa
3. SOLO procesa pedidos cuando el cliente confirme expl√≠citamente con frases como "confirmo", "s√≠, quiero comprarlo", "procede con el pedido"
4. Para respuestas vagas como "si", "ok", "bien" - pide m√°s especificaci√≥n
5. Si no hay stock, ofrece alternativas similares
6. Mant√©n el contexto de la conversaci√≥n anterior

CLIENTE: ${customerName || 'Cliente'}
MENSAJE ACTUAL: ${message}

üé≠ INSTRUCCIONES ESPEC√çFICAS PARA ESTA RESPUESTA:
1. ANALIZA el contexto conversacional arriba para entender qu√© informaci√≥n ya conoces del cliente
2. USA esa informaci√≥n para crear una respuesta que demuestre continuidad conversacional
3. EVITA saludos gen√©ricos si ya est√°n en medio de una conversaci√≥n
4. S√â ESPEC√çFICO y relevante al mensaje actual del cliente
5. MANT√âN el tono profesional pero natural y conversacional
6. Si hay informaci√≥n previa del cliente, haz referencia a ella de manera natural

Responde de manera natural, √∫til y contextual:`

      // Aplicar personalizaci√≥n seg√∫n perfil de negocio
      console.log(`üé≠ LLAMANDO getPersonalizedPrompt...`)
      const prompt = await this.getPersonalizedPrompt(basePrompt)
      console.log(`üé≠ PROMPT PERSONALIZADO GENERADO (primeros 200 chars): ${prompt.substring(0, 200)}...`)

      try {
        const result = await model.generateContent(prompt)
        const response = await result.response
        return response.text()
      } catch (error) {
        // Agregar informaci√≥n de API key al error para el sistema de reintentos
        error.apiKey = apiKey
        throw error
      }
    }

    try {
      return await this.executeWithRetry(operation)
    } catch (error) {
      console.error('Error generando respuesta con Gemini:', error)
      return 'Disculpa, tengo problemas t√©cnicos en este momento. ¬øPodr√≠as intentar de nuevo en unos minutos? ü§ñ'
    }
  }

  // Nuevo m√©todo para detectar intenci√≥n del cliente
  async detectCustomerIntent(message, inventory, conversationState = 'initial', conversationData = {}) {
    const operation = async (model, apiKey) => {
      const inventoryText = inventory.map(product =>
        `ID: ${product.id} - ${product.nombre}: S/ ${product.precio}`
      ).join('\n')

      // üéØ AN√ÅLISIS DE SUFICIENCIA DE INFORMACI√ìN PARA RECOMENDACIONES
      const recentHistory = conversationData.recentHistory || []
      const infoAnalysis = this.analyzeCustomerInformationSufficiency(recentHistory, message)
      let intelligentRecommendationContext = ''

      if (infoAnalysis.hasSufficientInfo) {
        intelligentRecommendationContext = `
üéØ INFORMACI√ìN SUFICIENTE DETECTADA:
- El cliente ya proporcion√≥: ${infoAnalysis.requirements.join(', ')}
- INSTRUCCI√ìN CR√çTICA: Si el cliente busca consejo/recomendaci√≥n, usar suggested_response_type: "recommend_specific_products"
- El cliente tiene suficiente contexto para recibir recomendaciones espec√≠ficas, NO preguntas gen√©ricas.`
      }

      // Construir contexto de conversaci√≥n
      let contextInfo = ''

      // Informaci√≥n sobre pedido completado recientemente
      if (conversationData.last_completed_order) {
        contextInfo += `
PEDIDO RECI√âN COMPLETADO:
- ID: ${conversationData.last_completed_order}
- Completado: ${conversationData.order_completed_at ? new Date(conversationData.order_completed_at).toLocaleString() : 'Recientemente'}
- NOTA: Este pedido YA EST√Å COMPLETADO. Cualquier nueva solicitud es un PEDIDO NUEVO.`
      }

      if (conversationData.pending_order) {
        const { products, quantity } = conversationData.pending_order
        contextInfo += `
PEDIDO PENDIENTE:
- Productos: ${products.map(p => p.name).join(', ')}
- Cantidad: ${quantity}
- Estado: Esperando confirmaci√≥n`
      } else if (conversationData.selected_products) {
        contextInfo += `
PRODUCTOS SELECCIONADOS ACTUALMENTE: ${conversationData.selected_products.map(p => p.name).join(', ')}
CANTIDAD ESPECIFICADA: ${conversationData.quantity || 'No especificada'}
IMPORTANTE: El cliente ya seleccion√≥ estos productos. Si menciona cantidad sin especificar producto, se refiere a los productos seleccionados.`
      } else if (conversationData.interested_products) {
        contextInfo += `
PRODUCTOS DE INTER√âS: ${conversationData.interested_products.map(p => p.name).join(', ')}`

        // Agregar informaci√≥n de cantidad si est√° disponible
        if (conversationData.quantity) {
          contextInfo += `
CANTIDAD ESPECIFICADA: ${conversationData.quantity}`
        }
      }

      const prompt = `
Analiza este mensaje del cliente y determina su intenci√≥n espec√≠fica Y su estado emocional.

INVENTARIO DISPONIBLE:
${inventoryText}

ESTADO ACTUAL: ${conversationState}
${contextInfo}
${intelligentRecommendationContext}
MENSAJE DEL CLIENTE: ${message}

‚ö†Ô∏è VALIDACI√ìN CR√çTICA: Si hay "PEDIDO RECI√âN COMPLETADO" en el contexto arriba Y el mensaje es de agradecimiento/conformidad, usar SIEMPRE "farewell", NO "process_order".

AN√ÅLISIS EMOCIONAL:
Detecta el estado emocional del cliente basado en el tono y palabras utilizadas:
- neutral: tono normal, sin emociones fuertes
- frustrated: molesto, enojado, irritado ("esto no funciona", "estoy molesto", "qu√© mal servicio", "no sirve")
- sad: triste, desanimado ("estoy triste", "tengo problemas", "me siento mal")
- confused: perdido, no entiende ("no entiendo", "estoy perdido", "no s√© qu√© hacer", "ayuda")
- excited: emocionado, entusiasmado ("genial", "perfecto", "me encanta", "excelente")
- grateful: agradecido ("muchas gracias", "excelente servicio", "muy amable")
- seeking_advice: busca consejo ("qu√© me recomiendas", "cu√°l es mejor", "ay√∫dame a elegir")

Responde SOLO con un JSON en este formato:
{
  "intent": "greeting|browsing|interested|specifying|confirming|payment|unclear|emotional_support",
  "confidence": "high|medium|low",
  "products_mentioned": [{"id": 1, "name": "producto mencionado"}],
  "quantity_mentioned": 0,
  "is_explicit_confirmation": false,
  "requires_clarification": true/false,
  "suggested_response_type": "show_products|ask_specification|ask_quantity|ask_confirmation|process_order|farewell|emotional_response|recommend_specific_products|admin_command",
  "emotional_state": "neutral|frustrated|sad|confused|excited|grateful|seeking_advice",
  "emotional_confidence": "high|medium|low",
  "needs_emotional_response": true/false,
  "emotional_keywords": ["palabras", "que", "indican", "emoci√≥n"],
  "reasoning": "explicaci√≥n breve de por qu√© se clasific√≥ as√≠ incluyendo an√°lisis emocional"
}

REGLAS IMPORTANTES:
- üîê COMANDOS ADMINISTRATIVOS: Si el mensaje contiene comandos como "crear producto", "nuevo producto", "agregar producto", "actualizar stock", "cambiar precio", "modificar producto", "ventas hoy", "estad√≠sticas", "reporte ventas", "inventario bajo", "productos agotados", "gestionar inventario" = suggested_response_type: "admin_command"
- üéØ RECOMENDACIONES INTELIGENTES: Si hay "INFORMACI√ìN SUFICIENTE DETECTADA" arriba Y el cliente busca consejo/recomendaci√≥n ("qu√© me recomiendas", "recomendar√≠as", "cu√°l es mejor", "ay√∫dame a elegir") = suggested_response_type: "recommend_specific_products"
- Si hay PEDIDO PENDIENTE y el mensaje es "Si", "S√≠", "Si confirmo", "Confirmo", "Ok", "Acepto" = is_explicit_confirmation: true, suggested_response_type: "process_order"
- Sin pedido pendiente: "Si", "Ok", "Bien" solos = intent: "unclear", requires_clarification: true
- PEDIDO RECI√âN COMPLETADO: Si hay un pedido reci√©n completado y el mensaje es agradecimiento ("gracias", "ok gracias", "perfecto", "excelente", "bien gracias", "est√° bien", "esta bien", "ok", "vale", "genial", "muy bien", "todo bien", "listo", "entendido", "de acuerdo", "correcto", "bueno", "bien", "üëç", "üëå", "‚úÖ") = intent: "confirming", suggested_response_type: "farewell", is_explicit_confirmation: false, requires_clarification: false
- CONTEXTO CR√çTICO: Si el estado es "browsing" Y hay un pedido reci√©n completado Y el mensaje es de agradecimiento/conformidad = SIEMPRE usar "farewell", NO "process_order"
- REGLA ABSOLUTA: Si hay "PEDIDO RECI√âN COMPLETADO" en el contexto Y el mensaje no menciona productos espec√≠ficos = NUNCA usar "process_order", usar "farewell" para agradecimientos
- ESTADO COMPLETED: Si el estado es "completed" y el mensaje es un saludo ("hola", "buenos d√≠as", "buenas tardes", etc.) = intent: "greeting", suggested_response_type: "show_products"
- Solo is_explicit_confirmation: true para confirmaciones expl√≠citas o cuando hay contexto de pedido pendiente
- products_mentioned solo si se menciona un producto espec√≠fico del inventario
- quantity_mentioned solo si se especifica un n√∫mero claro
- Si hay productos seleccionados o de inter√©s en el contexto, consid√©ralos en el an√°lisis
- Para preguntas como "Qu√© hay de X producto?" o "Informaci√≥n sobre X" = suggested_response_type: "ask_specification" (NO "show_products")
- "show_products" solo para saludos iniciales o cuando no se menciona producto espec√≠fico
- ESTADO INTERESTED: Si hay productos de inter√©s Y se especifica cantidad, usar suggested_response_type: "ask_quantity"
- ESTADO INTERESTED: Si se menciona producto espec√≠fico del inventario, usar suggested_response_type: "ask_quantity"
- PEDIDOS COMPLETADOS: Si hay un pedido reci√©n completado y el cliente menciona un producto diferente o nueva cantidad, es un PEDIDO NUEVO
- NUEVA CONVERSACI√ìN: Despu√©s de un pedido completado, cualquier solicitud de producto es independiente del pedido anterior
- CONTEXTO SEPARADO: No confundir pedidos completados con pedidos pendientes - son conversaciones separadas
- PRODUCTOS SELECCIONADOS: Si hay productos seleccionados y el cliente solo menciona cantidad (ej: "Quiero 1", "1", "dos"), usar esos productos seleccionados en products_mentioned
- PRIORIDAD DE CONTEXTO: Productos seleccionados > Productos de inter√©s > Pedidos completados (no usar para nuevas solicitudes)`

      try {
        const result = await model.generateContent(prompt)
        const response = await result.response
        const text = response.text()

        const jsonMatch = text.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0])
        } else {
          return {
            intent: 'unclear',
            confidence: 'low',
            products_mentioned: [],
            quantity_mentioned: 0,
            is_explicit_confirmation: false,
            requires_clarification: true,
            suggested_response_type: 'ask_specification',
            emotional_state: 'neutral',
            emotional_confidence: 'low',
            needs_emotional_response: false,
            emotional_keywords: [],
            reasoning: 'No se pudo parsear la respuesta'
          }
        }
      } catch (error) {
        // Agregar informaci√≥n de API key al error
        error.apiKey = apiKey
        throw error
      }
    }

    try {
      return await this.executeWithRetry(operation)
    } catch (error) {
      console.error('Error detectando intenci√≥n:', error)
      return {
        intent: 'unclear',
        confidence: 'low',
        products_mentioned: [],
        quantity_mentioned: 0,
        is_explicit_confirmation: false,
        requires_clarification: true,
        suggested_response_type: 'ask_specification',
        emotional_state: 'neutral',
        emotional_confidence: 'low',
        needs_emotional_response: false,
        emotional_keywords: [],
        reasoning: 'Error t√©cnico'
      }
    }
  }

  async validateYapePayment(imageBase64, expectedAmount, customerName, accountHolder, yapeNumber = null) {
    const operation = async (model, apiKey) => {
      // Extraer √∫ltimos 3 d√≠gitos del n√∫mero configurado si est√° disponible
      const expectedLastDigits = yapeNumber ? yapeNumber.slice(-3) : null

      const prompt = `
Analiza esta captura de pantalla de un pago por Yape y extrae toda la informaci√≥n relevante.

INFORMACI√ìN A VERIFICAR:
- Monto esperado: S/ ${expectedAmount}
- Cliente: ${customerName}
- Titular esperado: ${accountHolder}${expectedLastDigits ? `\n- √öltimos 3 d√≠gitos esperados del n√∫mero: ${expectedLastDigits}` : ''}

INSTRUCCIONES IMPORTANTES:
1. Verifica que sea una captura de Yape real
2. Extrae el monto exacto mostrado
3. Extrae el nombre completo del titular de la cuenta tal como aparece en Yape
4. Extrae el n√∫mero de operaci√≥n (c√≥digo √∫nico del pago)
5. Extrae la fecha y hora del pago
6. Extrae los √∫ltimos 3 d√≠gitos del n√∫mero de celular (aparece como *** *** XXX)
7. Confirma que el pago est√© completado exitosamente
8. Busca se√±ales de que sea una captura falsa o editada

VALIDACI√ìN DE TITULAR - FORMATO YAPE:
‚ö†Ô∏è IMPORTANTE: Yape muestra nombres en formato limitado:
- Primer nombre completo + inicial del segundo nombre + primer apellido completo + inicial del segundo apellido
- Ejemplo: "Juan Carlos Rodriguez Martinez" se muestra como "Juan C. Rodriguez M."
- Para validar titular_correcto, considera que el nombre detectado puede estar en este formato abreviado
- Si el primer nombre Y primer apellido coinciden, considera el titular como CORRECTO

VALIDACI√ìN DE √öLTIMOS 3 D√çGITOS:
${expectedLastDigits ? `- Los √∫ltimos 3 d√≠gitos detectados deben coincidir con: ${expectedLastDigits}` : '- Extrae los √∫ltimos 3 d√≠gitos del n√∫mero mostrado'}

VALIDACI√ìN DE MONTO:
10. Compara el monto detectado con el esperado:
    - Si coincide exactamente: monto_correcto = true
    - Si es menor: es_pago_parcial = true, calcular diferencia_monto
    - Si es mayor: es_pago_excesivo = true, calcular diferencia_monto

Responde SOLO con un JSON en este formato:
{
  "valido": true/false,
  "monto_detectado": "S/ XX",
  "monto_esperado": "S/ XX",
  "monto_correcto": true/false,
  "es_pago_parcial": true/false,
  "es_pago_excesivo": true/false,
  "diferencia_monto": 0,
  "titular_detectado": "Nombre Completo",
  "titular_correcto": true/false,
  "numero_operacion": "12345678",
  "fecha_pago": "DD mmm. YYYY | HH:MM p. m.",
  "ultimos_digitos": "XXX",
  "ultimos_digitos_correctos": true/false,
  "pago_completado": true/false,
  "razon": "explicaci√≥n detallada",
  "confianza": "alta/media/baja"
}

REGLAS IMPORTANTES:
- valido = true solo si la captura es aut√©ntica Y el pago est√° completado
- monto_correcto = true solo si el monto detectado coincide exactamente con el esperado
- es_pago_parcial = true si el monto detectado es menor al esperado
- es_pago_excesivo = true si el monto detectado es mayor al esperado
- diferencia_monto = valor absoluto de la diferencia entre monto detectado y esperado`

      const imagePart = {
        inlineData: {
          data: imageBase64,
          mimeType: 'image/jpeg'
        }
      }

      try {
        const result = await model.generateContent([prompt, imagePart])
        const response = await result.response
        const text = response.text()

        // Extraer JSON de la respuesta
        const jsonMatch = text.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0])
        } else {
          throw new Error('No se encontr√≥ JSON v√°lido en la respuesta')
        }
      } catch (error) {
        // Agregar informaci√≥n de API key al error
        error.apiKey = apiKey
        throw error
      }
    }

    try {
      return await this.executeWithRetry(operation)
    } catch (error) {
      console.error('Error validando pago con Gemini Vision:', error)
      return {
        valido: false,
        monto_detectado: '0',
        razon: 'Error t√©cnico al procesar la imagen: ' + error.message,
        confianza: 'baja'
      }
    }
  }

  async extractProductsFromMessage(message, inventory) {
    const operation = async () => {
      const inventoryText = inventory.map(product =>
        `ID: ${product.id} - ${product.nombre}: S/ ${product.precio}`
      ).join('\n')

      const prompt = `
Analiza este mensaje de un cliente y extrae los productos que quiere comprar.

INVENTARIO DISPONIBLE:
${inventoryText}

MENSAJE DEL CLIENTE: ${message}

Responde SOLO con un JSON en este formato:
{
  "productos": [
    {
      "id": 1,
      "nombre": "nombre del producto",
      "cantidad": 2,
      "precio_unitario": 25.50
    }
  ],
  "total": 51.00,
  "mensaje_confirmacion": "mensaje amigable confirmando el pedido"
}

Si no se pueden identificar productos espec√≠ficos, devuelve un array vac√≠o en productos.`

      try {
        const { model, apiKey } = await this.getModel()
        const result = await model.generateContent(prompt)
        const response = await result.response
        const text = response.text()

        // Marcar √©xito en la API key
        this.apiKeyManager.markSuccess(apiKey)

        const jsonMatch = text.match(/\{[\s\S]*\}/)
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0])
        } else {
          return { productos: [], total: 0, mensaje_confirmacion: '' }
        }
      } catch (error) {
        // Agregar informaci√≥n de API key al error
        error.apiKey = error.apiKey || 'unknown'
        throw error
      }
    }

    try {
      return await this.executeWithRetry(operation)
    } catch (error) {
      console.error('Error extrayendo productos:', error)
      return { productos: [], total: 0, mensaje_confirmacion: '' }
    }
  }

  async generateOrderConfirmation(products, total, customerName, yapeNumber, accountHolder, orderId) {
    const operation = async (model, apiKey) => {
      const productsText = products.map(p =>
        `${p.cantidad}x ${p.nombre} - S/ ${p.precio_unitario} c/u`
      ).join('\n')

      // Obtener el nombre del negocio desde la configuraci√≥n
      let businessName = 'nuestra tienda'
      if (this.db) {
        try {
          const configuredBusinessName = await this.db.getConfig('business_name')
          if (configuredBusinessName && configuredBusinessName.trim() !== '') {
            businessName = configuredBusinessName
          }
        } catch (error) {
          console.log('‚ö†Ô∏è No se pudo obtener business_name para confirmaci√≥n, usando valor por defecto')
        }
      }

      // üé≠ GENERAR PROMPT PERSONALIZADO SEG√öN PERFIL DE NEGOCIO
      const basePrompt = `
Genera un mensaje de confirmaci√≥n de pedido amigable y profesional.

DATOS DEL PEDIDO:
- CLIENTE: ${customerName}
- N√öMERO DE PEDIDO: ${orderId}
- PRODUCTOS:
${productsText}
- TOTAL: S/ ${total}

INFORMACI√ìN DE PAGO:
- N√∫mero Yape: ${yapeNumber}
- Titular de cuenta: ${accountHolder}

ESTRUCTURA REQUERIDA:
1. SALUDO: "¬°Hola ${customerName}!" (USAR EXACTAMENTE EL NOMBRE DEL CLIENTE)
2. Confirmar recepci√≥n del pedido con n√∫mero
3. Listar productos y total
4. Explicar que el pago es por Yape al n√∫mero espec√≠fico
5. Mencionar el nombre del titular de la cuenta
6. Pedir que env√≠e la captura del pago
7. Ser amigable y usar emojis apropiados
8. DESPEDIDA: Terminar con "Atentamente, ${businessName}"

IMPORTANTE: El saludo debe ser para el CLIENTE (${customerName}), NO para el negocio.

Genera un mensaje natural y profesional:`

      // Aplicar personalizaci√≥n seg√∫n perfil de negocio
      const prompt = await this.getPersonalizedPrompt(basePrompt)

      try {
        const result = await model.generateContent(prompt)
        const response = await result.response
        return response.text()
      } catch (error) {
        // Agregar informaci√≥n de API key al error
        error.apiKey = apiKey
        throw error
      }
    }

    try {
      return await this.executeWithRetry(operation)
    } catch (error) {
      console.error('Error generando confirmaci√≥n de pedido:', error)

      // Obtener nombre del negocio para el mensaje de fallback
      let businessName = 'nuestra tienda'
      if (this.db) {
        try {
          const configuredBusinessName = await this.db.getConfig('business_name')
          if (configuredBusinessName && configuredBusinessName.trim() !== '') {
            businessName = configuredBusinessName
          }
        } catch (error) {
          console.log('‚ö†Ô∏è No se pudo obtener business_name para fallback')
        }
      }

      return `¬°Hola ${customerName}! üòä\n\nTu pedido #${orderId} ha sido recibido con √©xito! üéâ\n\nHemos confirmado tu compra de:\n\n${products.map(p => `‚Ä¢ ${p.cantidad}x ${p.nombre} - S/ ${p.precio_unitario} c/u`).join('\n')}\n\nEl total a pagar es de S/ ${total}.\n\nPara completar tu compra, por favor realiza el pago a trav√©s de Yape al n√∫mero +51 ${yapeNumber} a nombre de ${accountHolder}.\n\nUna vez realizado el pago, te agradeceremos que nos env√≠es una captura de pantalla como comprobante. Esto nos ayudar√° a procesar tu pedido m√°s r√°pidamente. üì±\n\n¬°Gracias por tu compra! Esperamos que disfrutes de tu nuevo ${products.map(p => p.nombre).join(', ')}. üì±\n\nCualquier duda, no dudes en contactarnos.\n\nSaludos cordiales,\n\n${businessName}`
    }
  }

  // üé≠ NUEVO M√âTODO: Generar respuestas emocionales emp√°ticas
  async generateEmotionalResponse(message, customerName, emotionalState, emotionalKeywords, conversationState = 'browsing') {
    console.log(`üé≠ GENERANDO respuesta emocional para estado: ${emotionalState}`)

    const operation = async (model, apiKey) => {
      const basePrompt = `
Genera una respuesta emp√°tica y profesional para un cliente que est√° experimentando el siguiente estado emocional.

INFORMACI√ìN DEL CLIENTE:
- Nombre: ${customerName}
- Mensaje original: "${message}"
- Estado emocional: ${emotionalState}
- Palabras clave emocionales: ${emotionalKeywords.join(', ')}
- Estado de conversaci√≥n: ${conversationState}

INSTRUCCIONES ESPEC√çFICAS SEG√öN ESTADO EMOCIONAL:

${emotionalState === 'frustrated' ? `
CLIENTE FRUSTRADO:
- Reconoce su frustraci√≥n de manera emp√°tica
- Ofrece disculpas si es apropiado
- Muestra comprensi√≥n de su situaci√≥n
- Ofrece ayuda espec√≠fica para resolver el problema
- Mant√©n un tono calmado y profesional
Ejemplo: "Entiendo perfectamente tu frustraci√≥n, ${customerName}. Lamento que hayas tenido esta experiencia. Estoy aqu√≠ para ayudarte a resolver esto de la mejor manera posible."
` : ''}

${emotionalState === 'sad' ? `
CLIENTE TRISTE:
- Muestra empat√≠a genuina por su situaci√≥n
- Ofrece palabras de aliento breves pero sinceras
- Evita ser demasiado efusivo o falso
- Ofrece tu apoyo de manera profesional
Ejemplo: "Lamento escuchar que est√°s pasando por un momento dif√≠cil, ${customerName}. Aunque no puedo resolver todos los problemas, estoy aqu√≠ para ayudarte en lo que est√© a mi alcance."
` : ''}

${emotionalState === 'confused' ? `
CLIENTE CONFUNDIDO:
- Reconoce que la situaci√≥n puede ser confusa
- Ofrece clarificaci√≥n de manera simple y directa
- Aseg√∫rale que es normal tener dudas
- Proporciona orientaci√≥n paso a paso
Ejemplo: "No te preocupes, ${customerName}, es completamente normal tener dudas. D√©jame ayudarte a aclarar todo paso a paso."
` : ''}

${emotionalState === 'excited' ? `
CLIENTE EMOCIONADO:
- Comparte su entusiasmo de manera profesional
- Valida su emoci√≥n positiva
- Canaliza su energ√≠a hacia la compra
- Mant√©n el momentum positivo
Ejemplo: "¬°Me alegra mucho ver tu entusiasmo, ${customerName}! Es genial cuando nuestros clientes se emocionan con nuestros productos."
` : ''}

${emotionalState === 'grateful' ? `
CLIENTE AGRADECIDO:
- Acepta su agradecimiento con humildad
- Refuerza el compromiso con el buen servicio
- Mant√©n la puerta abierta para futuras interacciones
Ejemplo: "Muchas gracias por tus palabras, ${customerName}. Es un placer poder ayudarte. Siempre estamos aqu√≠ cuando nos necesites."
` : ''}

${emotionalState === 'seeking_advice' ? `
CLIENTE BUSCANDO CONSEJO:
- Reconoce que busca orientaci√≥n
- Ofrece ayuda personalizada
- Haz preguntas para entender mejor sus necesidades
- Posici√≥nate como un asesor confiable
Ejemplo: "Por supuesto, ${customerName}, estar√© encantado de ayudarte a elegir la mejor opci√≥n. Para darte la mejor recomendaci√≥n, cu√©ntame un poco m√°s sobre lo que necesitas."
` : ''}

REGLAS IMPORTANTES:
1. La respuesta debe ser BREVE (m√°ximo 2-3 l√≠neas)
2. Debe sonar NATURAL y HUMANA, no rob√≥tica
3. Debe ser PROFESIONAL pero C√ÅLIDA
4. SIEMPRE termina preguntando: "¬øEn qu√© m√°s te puedo ayudar hoy?"
5. NO menciones productos espec√≠ficos en esta respuesta
6. NO hagas la respuesta demasiado larga o dram√°tica
7. Mant√©n el equilibrio entre empat√≠a y profesionalismo

Genera una respuesta emp√°tica y luego pregunta c√≥mo puedes ayudar:`

      // Aplicar personalizaci√≥n seg√∫n perfil de negocio
      const prompt = await this.getPersonalizedPrompt(basePrompt)

      try {
        const result = await model.generateContent(prompt)
        const response = await result.response
        return response.text()
      } catch (error) {
        // Agregar informaci√≥n de API key al error
        error.apiKey = apiKey
        throw error
      }
    }

    try {
      return await this.executeWithRetry(operation)
    } catch (error) {
      console.error('Error generando respuesta emocional con Gemini:', error)
      // Fallback emp√°tico seg√∫n el estado emocional
      const fallbackResponses = {
        frustrated: `Entiendo tu frustraci√≥n, ${customerName}. Estoy aqu√≠ para ayudarte. ¬øEn qu√© m√°s te puedo ayudar hoy?`,
        sad: `Lamento que est√©s pasando por un momento dif√≠cil, ${customerName}. ¬øEn qu√© m√°s te puedo ayudar hoy?`,
        confused: `No te preocupes, ${customerName}, estoy aqu√≠ para aclarar tus dudas. ¬øEn qu√© m√°s te puedo ayudar hoy?`,
        excited: `¬°Me alegra tu entusiasmo, ${customerName}! ¬øEn qu√© m√°s te puedo ayudar hoy?`,
        grateful: `Gracias por tus palabras, ${customerName}. ¬øEn qu√© m√°s te puedo ayudar hoy?`,
        seeking_advice: `Por supuesto, ${customerName}, estar√© encantado de ayudarte a elegir. ¬øEn qu√© m√°s te puedo ayudar hoy?`
      }
      return fallbackResponses[emotionalState] || `Entiendo, ${customerName}. ¬øEn qu√© m√°s te puedo ayudar hoy?`
    }
  }
}
