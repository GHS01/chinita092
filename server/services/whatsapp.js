import { makeWASocket, DisconnectReason, useMultiFileAuthState, downloadContentFromMessage } from '@whiskeysockets/baileys'
import QRCode from 'qrcode'
import fs from 'fs'
import path from 'path'

export class WhatsAppService {
  constructor(io, geminiService, inventoryService, orderService, dbService, salesService = null) {
    this.io = io
    this.gemini = geminiService
    this.inventory = inventoryService
    this.orders = orderService
    this.db = dbService
    this.sales = salesService
    this.googleDrive = null // Se establecer√° despu√©s con setGoogleDriveService
    this.sock = null
    this.qr = null
    this.isConnected = false
    this.messageCount = 0
    this.pendingOrders = new Map() // Para manejar pedidos en proceso

    // Control de reconexiones para evitar bucles infinitos
    this.reconnectAttempts = 0
    this.maxReconnectAttempts = 5
    this.reconnectDelay = 3000 // Delay inicial
    this.isReconnecting = false
    this.lastDisconnectReason = null

    // Sistema de estados de conversaci√≥n
    this.conversationStates = new Map()
    this.conversationHistory = new Map()

    // Estados posibles
    this.STATES = {
      INITIAL: 'initial',           // Primera interacci√≥n
      ASKING_NAME: 'asking_name',   // Solicitando nombre del cliente
      BROWSING: 'browsing',         // Viendo productos
      INTERESTED: 'interested',     // Mostr√≥ inter√©s en algo
      SPECIFYING: 'specifying',     // Especificando producto/cantidad
      CONFIRMING: 'confirming',     // Esperando confirmaci√≥n final
      PAYMENT: 'payment',           // Esperando pago
      COMPLETED: 'completed',       // Pedido completado, listo para despedida
      EMOTIONAL_SUPPORT: 'emotional_support', // üé≠ Estado temporal para apoyo emocional

      // üîê ESTADOS ADMINISTRATIVOS (NUEVOS)
      ADMIN_AUTH: 'admin_auth',                 // Solicitando c√≥digo de autorizaci√≥n
      ADMIN_MENU: 'admin_menu',                 // Men√∫ administrativo principal
      ADMIN_ADD_PRODUCT: 'admin_add_product',   // Creando nuevo producto
      ADMIN_UPDATE_PRODUCT: 'admin_update_product', // Actualizando producto existente
      ADMIN_UPDATE_STOCK: 'admin_update_stock', // Actualizando stock
      ADMIN_QUERY_STATS: 'admin_query_stats',   // Consultando estad√≠sticas
      ADMIN_LIST_PRODUCTS: 'admin_list_products' // Listando productos para gesti√≥n
    }

    // üé≠ Sistema de timeout para estados emocionales
    this.emotionalTimeouts = new Map() // Almacena timeouts por cliente

    // Crear directorio para auth si no existe
    if (!fs.existsSync('./auth_info_baileys')) {
      fs.mkdirSync('./auth_info_baileys')
    }
  }

  // M√©todo para establecer referencia de GoogleDriveService
  setGoogleDriveService(googleDriveService) {
    this.googleDrive = googleDriveService
  }

  // M√©todos para manejar estados de conversaci√≥n
  getConversationState(clientId) {
    return this.conversationStates.get(clientId) || this.STATES.INITIAL
  }

  setConversationState(clientId, state, data = {}) {
    this.conversationStates.set(clientId, state)

    // Actualizar datos del estado si se proporcionan
    if (Object.keys(data).length > 0) {
      const currentData = this.conversationStates.get(`${clientId}_data`) || {}
      this.conversationStates.set(`${clientId}_data`, { ...currentData, ...data })
    }

    console.log(`üîÑ Estado de ${clientId}: ${state}`)
  }

  getConversationData(clientId) {
    return this.conversationStates.get(`${clientId}_data`) || {}
  }

  clearConversationState(clientId) {
    this.conversationStates.delete(clientId)
    this.conversationStates.delete(`${clientId}_data`)
    this.conversationHistory.delete(clientId)
    console.log(`üßπ Estado limpiado para ${clientId}`)
  }

  // M√©todos para manejar historial de conversaci√≥n
  addToHistory(clientId, role, message) {
    if (!this.conversationHistory.has(clientId)) {
      this.conversationHistory.set(clientId, [])
    }

    const history = this.conversationHistory.get(clientId)
    history.push({
      role,
      message,
      timestamp: new Date()
    })

    // Mantener solo los √∫ltimos 10 mensajes
    if (history.length > 10) {
      history.shift()
    }
  }

  getRecentHistory(clientId, limit = 5) {
    const history = this.conversationHistory.get(clientId) || []
    return history.slice(-limit)
  }

  // Verificar si es un mensaje duplicado reciente
  isDuplicateMessage(clientId, message) {
    const history = this.conversationHistory.get(clientId) || []
    const recent = history.slice(-3) // √öltimos 3 mensajes

    return recent.some(msg =>
      msg.role === 'user' &&
      msg.message === message &&
      (new Date() - msg.timestamp) < 5000 // Menos de 5 segundos
    )
  }

  // M√©todo para obtener el nombre del negocio desde la configuraci√≥n
  async getBusinessName() {
    try {
      const businessName = await this.db.getConfig('business_name')
      return businessName && businessName.trim() !== '' ? businessName : 'nuestra tienda'
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudo obtener business_name, usando valor por defecto')
      return 'nuestra tienda'
    }
  }

  // M√©todo para obtener el mensaje de bienvenida personalizado desde la configuraci√≥n
  async getWelcomeMessage() {
    try {
      const welcomeMessage = await this.db.getConfig('welcome_message')
      if (welcomeMessage && welcomeMessage.trim() !== '') {
        return welcomeMessage
      }

      // Fallback: mensaje por defecto con nombre del negocio
      const businessName = await this.getBusinessName()
      return `¬°Hola! üëã Bienvenido/a a ${businessName}.

Para brindarte una atenci√≥n m√°s personalizada y hacer que tu experiencia sea especial, me encantar√≠a conocerte mejor.

¬øPodr√≠as decirme tu nombre? üòä`
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudo obtener welcome_message, usando valor por defecto')
      const businessName = await this.getBusinessName()
      return `¬°Hola! üëã Bienvenido/a a ${businessName}.

Para brindarte una atenci√≥n m√°s personalizada y hacer que tu experiencia sea especial, me encantar√≠a conocerte mejor.

¬øPodr√≠as decirme tu nombre? üòä`
    }
  }

  // M√©todo para manejar reconexiones con backoff exponencial
  handleReconnection() {
    if (this.isReconnecting) {
      console.log('üîÑ Ya hay una reconexi√≥n en progreso, ignorando...')
      return
    }

    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.log('‚ùå M√°ximo n√∫mero de intentos de reconexi√≥n alcanzado')
      this.isConnected = false
      this.isReconnecting = false
      this.io.emit('whatsapp-status', 'error')
      this.io.emit('system-error', {
        message: `Fall√≥ la reconexi√≥n despu√©s de ${this.maxReconnectAttempts} intentos. Intenta conectar manualmente.`
      })
      return
    }

    this.isReconnecting = true
    this.reconnectAttempts++

    // Backoff exponencial: 3s, 6s, 12s, 24s, 48s
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1)

    console.log(`üîÑ Reconectando WhatsApp... (Intento ${this.reconnectAttempts}/${this.maxReconnectAttempts}) - Esperando ${delay}ms`)
    this.io.emit('whatsapp-status', 'reconnecting')

    setTimeout(() => {
      if (this.isReconnecting) { // Verificar que a√∫n necesitamos reconectar
        this.connect()
      }
    }, delay)
  }

  async connect() {
    try {
      // Si no estamos en proceso de reconexi√≥n autom√°tica, resetear contadores
      if (!this.isReconnecting) {
        this.reconnectAttempts = 0
        console.log('üîÑ Iniciando conexi√≥n manual - Reseteando contadores de reconexi√≥n')
      }

      const { state, saveCreds } = await useMultiFileAuthState('./auth_info_baileys')

      this.sock = makeWASocket({
        auth: state,
        printQRInTerminal: false,
        logger: {
          level: 'silent',
          child: () => ({
            level: 'silent',
            trace: () => {},
            debug: () => {},
            info: () => {},
            warn: () => {},
            error: () => {},
            fatal: () => {}
          }),
          trace: () => {},
          debug: () => {},
          info: () => {},
          warn: () => {},
          error: () => {},
          fatal: () => {}
        }
      })

      // Manejar eventos de conexi√≥n
      this.sock.ev.on('connection.update', async (update) => {
        const { connection, lastDisconnect, qr } = update

        if (qr) {
          this.qr = qr
          const qrImage = await QRCode.toDataURL(qr)
          this.io.emit('qr-code', qrImage)
          this.io.emit('whatsapp-status', 'connecting')
          console.log('üì± C√≥digo QR generado para WhatsApp')
        }

        if (connection === 'close') {
          const statusCode = lastDisconnect?.error?.output?.statusCode
          this.lastDisconnectReason = statusCode

          console.log('üì± Conexi√≥n cerrada. C√≥digo:', statusCode, 'Raz√≥n:', DisconnectReason[statusCode] || 'Desconocida')

          // Manejar c√≥digo 440 (connectionReplaced) - m√∫ltiples instancias
          if (statusCode === DisconnectReason.connectionReplaced) {
            console.log('üö® CONEXI√ìN REEMPLAZADA - Posible m√∫ltiple instancia detectada')
            console.log('‚ö†Ô∏è Deteniendo reconexiones autom√°ticas para evitar bucle infinito')
            this.isConnected = false
            this.isReconnecting = false
            this.reconnectAttempts = 0
            this.io.emit('whatsapp-status', 'error')
            this.io.emit('system-error', {
              message: 'Conexi√≥n reemplazada por otra instancia. Verifica que no haya m√∫ltiples bots corriendo.'
            })
            return // No reconectar autom√°ticamente
          }

          if (statusCode === DisconnectReason.loggedOut) {
            // Sesi√≥n cerrada desde el tel√©fono - Auto-limpiar
            console.log('üö® Sesi√≥n cerrada desde WhatsApp - Iniciando auto-limpieza...')
            this.isConnected = false
            this.isReconnecting = false
            this.reconnectAttempts = 0
            this.io.emit('whatsapp-status', 'session-invalid')

            // Auto-limpiar sesi√≥n despu√©s de un momento
            setTimeout(async () => {
              try {
                await this.clearSession()
                this.io.emit('whatsapp-status', 'ready-to-connect')
              } catch (error) {
                console.error('Error en auto-limpieza:', error)
                this.io.emit('whatsapp-status', 'error')
              }
            }, 2000)

          } else if (statusCode !== DisconnectReason.loggedOut && statusCode !== DisconnectReason.connectionReplaced) {
            // Implementar backoff exponencial para otras desconexiones
            this.handleReconnection()
          } else {
            console.log('‚ùå WhatsApp desconectado')
            this.isConnected = false
            this.isReconnecting = false
            this.io.emit('whatsapp-status', 'disconnected')
          }
        } else if (connection === 'open') {
          console.log('‚úÖ WhatsApp conectado exitosamente')
          this.isConnected = true
          this.isReconnecting = false
          this.reconnectAttempts = 0 // Reset contador en conexi√≥n exitosa
          this.qr = null
          this.io.emit('whatsapp-ready')
          this.io.emit('whatsapp-status', 'connected')
        }
      })

      // Guardar credenciales cuando cambien
      this.sock.ev.on('creds.update', saveCreds)

      // Manejar mensajes entrantes
      this.sock.ev.on('messages.upsert', async (m) => {
        const message = m.messages[0]
        if (!message.key.fromMe && message.message) {
          await this.handleIncomingMessage(message)
        }
      })

    } catch (error) {
      console.error('Error conectando WhatsApp:', error)
      throw error
    }
  }

  async disconnect() {
    if (this.sock) {
      await this.sock.logout()
      this.sock = null
      this.isConnected = false
      this.io.emit('whatsapp-status', 'disconnected')
      console.log('üì± WhatsApp desconectado')
    }
  }

  async clearSession() {
    try {
      console.log('üßπ Iniciando limpieza de sesi√≥n WhatsApp...')

      // Desconectar si est√° conectado
      if (this.sock) {
        try {
          await this.sock.logout()
        } catch (error) {
          console.log('‚ö†Ô∏è Error al desconectar (esperado si sesi√≥n inv√°lida):', error.message)
        }
        this.sock = null
      }

      // Limpiar estado
      this.isConnected = false
      this.qr = null
      this.pendingOrders.clear()

      // Eliminar archivos de autenticaci√≥n
      if (fs.existsSync('./auth_info_baileys')) {
        console.log('üóëÔ∏è Eliminando archivos de autenticaci√≥n...')
        fs.rmSync('./auth_info_baileys', { recursive: true, force: true })
        console.log('‚úÖ Archivos de autenticaci√≥n eliminados')
      }

      // Recrear directorio
      if (!fs.existsSync('./auth_info_baileys')) {
        fs.mkdirSync('./auth_info_baileys')
      }

      // Notificar al frontend
      this.io.emit('whatsapp-status', 'session-cleared')
      this.io.emit('session-cleared', {
        message: 'Sesi√≥n limpiada exitosamente. Puedes reconectar ahora.'
      })

      console.log('‚úÖ Sesi√≥n WhatsApp limpiada exitosamente')
      return { success: true, message: 'Sesi√≥n limpiada exitosamente' }

    } catch (error) {
      console.error('‚ùå Error limpiando sesi√≥n:', error)
      this.io.emit('session-clear-error', { error: error.message })
      throw new Error('Error al limpiar sesi√≥n: ' + error.message)
    }
  }

  async forceReconnect() {
    try {
      console.log('üîÑ Forzando reconexi√≥n WhatsApp...')

      // Limpiar sesi√≥n primero
      await this.clearSession()

      // Esperar un momento
      await new Promise(resolve => setTimeout(resolve, 2000))

      // Reconectar
      await this.connect()

      console.log('‚úÖ Reconexi√≥n forzada completada')
      return { success: true, message: 'Reconexi√≥n exitosa' }

    } catch (error) {
      console.error('‚ùå Error en reconexi√≥n forzada:', error)
      throw error
    }
  }

  async handleIncomingMessage(message) {
    try {
      const from = message.key.remoteJid
      const messageText = message.message?.conversation ||
                         message.message?.extendedTextMessage?.text || ''

      // Verificar duplicados
      if (this.isDuplicateMessage(from, messageText)) {
        console.log(`üîÑ Mensaje duplicado ignorado de ${from}`)
        return
      }

      // Incrementar contador de mensajes
      this.messageCount++

      // Registrar mensaje en base de datos y historial
      await this.logMessage(from, messageText, 'recibido')
      this.addToHistory(from, 'user', messageText)

      console.log(`üì® Mensaje de ${from}: ${messageText}`)

      // Obtener inventario actual
      const products = await this.inventory.getAllProducts()

      // INTERRUPTOR MAESTRO - Verificar si las respuestas autom√°ticas est√°n habilitadas
      const autoResponsesEnabled = await this.db.getConfig('auto_responses_enabled')
      if (autoResponsesEnabled !== 'true') {
        console.log('üîá Auto respuestas deshabilitadas - mensaje ignorado')
        return
      }

      // Verificar si es una imagen (posible captura de pago)
      if (message.message?.imageMessage) {
        await this.handleImageMessage(message, from)
        return
      }

      // Obtener estado actual de conversaci√≥n
      const currentState = this.getConversationState(from)
      const conversationData = this.getConversationData(from)
      const recentHistory = this.getRecentHistory(from, 3)

      console.log(`üîç Estado actual: ${currentState}`)

      // DETECTAR INTENCI√ìN PRIMERO (para l√≥gica inteligente de filtros)
      const intent = await this.gemini.detectCustomerIntent(messageText, products, currentState, {
        ...conversationData,
        recentHistory
      })
      console.log(`üéØ Intenci√≥n detectada:`, intent)

      // APLICAR FILTROS DE MENSAJES (con l√≥gica inteligente)
      const shouldProcessMessage = await this.shouldProcessMessageIntelligent(messageText, currentState, from, intent)
      if (!shouldProcessMessage) {
        console.log('üö´ Mensaje filtrado - no cumple criterios configurados')
        return
      }

      // Procesar seg√∫n la intenci√≥n y estado
      await this.processCustomerIntent(from, messageText, intent, products, currentState, conversationData, recentHistory)

    } catch (error) {
      console.error('Error manejando mensaje entrante:', error)
      await this.sendMessage(
        message.key.remoteJid,
        'Disculpa, tuve un problema t√©cnico. ¬øPodr√≠as intentar de nuevo? ü§ñ'
      )
    }
  }

  // Procesar intenci√≥n del cliente seg√∫n el estado actual
  async processCustomerIntent(from, messageText, intent, products, currentState, conversationData, recentHistory) {
    // üîê MANEJAR ESTADOS ADMINISTRATIVOS PRIMERO
    if (this.isAdminState(currentState)) {
      await this.processAdminState(from, messageText, currentState, conversationData)
      return // Salir aqu√≠ para no procesar l√≥gica de ventas
    }

    // Manejar estado ASKING_NAME primero
    if (currentState === this.STATES.ASKING_NAME) {
      const processedName = await this.processReceivedName(from, messageText)
      if (processedName) {
        // Nombre procesado exitosamente, continuar con flujo normal
        console.log(`‚úÖ Nombre guardado: ${processedName} para ${from}`)
      }
      return // Salir aqu√≠ para no procesar m√°s l√≥gica
    }

    // üé≠ VERIFICAR TRANSICI√ìN DE ESTADO EMOCIONAL
    const hadEmotionalTransition = await this.checkEmotionalStateTransition(from, intent, currentState)
    if (hadEmotionalTransition) {
      // Si hubo transici√≥n, actualizar el estado actual
      currentState = this.getConversationState(from)
      console.log(`üé≠ Estado actualizado despu√©s de transici√≥n emocional: ${currentState}`)
    }

    // Manejar estado COMPLETED - cliente inicia nueva conversaci√≥n despu√©s de despedida
    if (currentState === this.STATES.COMPLETED && intent.intent === 'greeting') {
      const customerName = await this.getCustomerName(from)
      if (customerName) {
        await this.handleReturningCustomerGreeting(from, customerName, products)
        this.setConversationState(from, this.STATES.BROWSING)
        return
      }
    }

    const customerName = await this.getCustomerName(from)

    // üîê MANEJAR ACTIVACI√ìN DE MODO ADMINISTRATIVO
    if (this.isAdminModeActivation(messageText)) {
      await this.handleAdminModeActivation(from, messageText, customerName)
      return
    }

    // üîê MANEJAR DESACTIVACI√ìN DE MODO ADMINISTRATIVO
    if (this.isAdminModeDeactivation(messageText) && this.isAdminState(currentState)) {
      await this.handleAdminModeDeactivation(from, customerName)
      return
    }

    // Si no tenemos nombre y no estamos en ASKING_NAME, solicitarlo
    if (!customerName && currentState === this.STATES.INITIAL) {
      await this.askForCustomerName(from)
      return // Salir aqu√≠ para esperar el nombre
    }

    // üé≠ MANEJAR ESTADO EMOTIONAL_SUPPORT
    if (currentState === this.STATES.EMOTIONAL_SUPPORT) {
      // Si sigue necesitando apoyo emocional, continuar con respuesta emocional
      if (intent.needs_emotional_response) {
        await this.handleEmotionalResponse(from, messageText, intent, customerName, currentState)
        return
      } else {
        // Si ya no necesita apoyo emocional, hacer transici√≥n autom√°tica
        await this.returnFromEmotionalState(from)
        currentState = this.getConversationState(from) // Actualizar estado
        console.log(`üé≠ Transici√≥n autom√°tica completada, nuevo estado: ${currentState}`)
        // Continuar con el procesamiento normal
      }
    }

    // L√ìGICA ESPECIAL: Si cliente est√° en INTERESTED y especifica producto + cantidad, avanzar a confirmaci√≥n
    // üîç NUEVA CONDICI√ìN: Solo si NO est√° buscando informaci√≥n (seeking_advice) Y NO est√° navegando (browsing)
    if (currentState === this.STATES.INTERESTED &&
        intent.products_mentioned.length > 0 &&
        (intent.quantity_mentioned > 0 || conversationData.quantity > 0) &&
        intent.intent !== 'seeking_advice' &&
        intent.intent !== 'browsing') {

      const finalQuantity = intent.quantity_mentioned || conversationData.quantity || 1

      // MEJORA: Usar productos del contexto si Gemini no detect√≥ productos correctamente
      let productsToConfirm = intent.products_mentioned
      if (productsToConfirm.length === 0 && conversationData.interested_products) {
        productsToConfirm = conversationData.interested_products
        console.log(`üîß CORRECCI√ìN L√ìGICA ESPECIAL: Usando productos del contexto:`, productsToConfirm)
      }

      // Avanzar directamente a confirmaci√≥n
      console.log(`üîç DEBUG L√ìGICA ESPECIAL - Creando pending_order:`, {
        products: productsToConfirm,
        quantity: finalQuantity
      })
      await this.handleAskConfirmation(from, intent, conversationData, customerName, productsToConfirm)
      this.setConversationState(from, this.STATES.CONFIRMING, {
        ...conversationData,
        pending_order: {
          products: productsToConfirm,
          quantity: finalQuantity
        },
        order_processed: false  // Resetear para permitir nuevo pedido
      })
      return
    }

    // üö´ MANEJO ESPECIAL: Detectar cancelaci√≥n en estado CONFIRMING
    if (currentState === this.STATES.CONFIRMING &&
        (messageText.toLowerCase().trim() === 'no' ||
         messageText.toLowerCase().includes('cancelar') ||
         messageText.toLowerCase().includes('no quiero'))) {

      console.log(`üö´ CANCELACI√ìN DETECTADA en estado CONFIRMING para ${customerName}`)

      // Limpiar pending_order y volver a navegaci√≥n
      await this.handleOrderCancellation(from, customerName)
      this.setConversationState(from, this.STATES.BROWSING, {
        ...conversationData,
        pending_order: null,
        order_processed: false
      })
      return
    }

    try {
      switch (intent.suggested_response_type) {
        case 'show_products':
          await this.handleShowProducts(from, customerName, products, recentHistory)
          this.setConversationState(from, this.STATES.BROWSING)
          break

        case 'recommend_specific_products':
          await this.handleRecommendSpecificProducts(from, messageText, customerName, products, recentHistory)
          this.setConversationState(from, this.STATES.INTERESTED)
          break

        case 'admin_command':
          await this.handleAdminCommand(from, messageText, customerName)
          break

        case 'farewell':
          await this.handleFarewell(from, customerName)
          this.setConversationState(from, this.STATES.COMPLETED)
          break

        case 'ask_specification':
          await this.handleAskSpecification(from, messageText, intent, products, customerName, recentHistory)

          // Mejorar gesti√≥n de contexto: preservar cantidad si se especifica
          const newStateData = {
            interested_products: intent.products_mentioned
          }

          // Si se detect√≥ cantidad en este mensaje, guardarla
          if (intent.quantity_mentioned > 0) {
            newStateData.quantity = intent.quantity_mentioned
          }

          this.setConversationState(from, this.STATES.INTERESTED, newStateData)
          break

        case 'ask_quantity':
          await this.handleAskQuantity(from, intent, conversationData, customerName, recentHistory)

          // Mejorar transici√≥n: usar productos de inter√©s si no hay productos mencionados espec√≠ficamente
          const selectedProducts = intent.products_mentioned.length > 0
            ? intent.products_mentioned
            : conversationData.interested_products || []

          // Usar cantidad detectada o cantidad previa del contexto
          const finalQuantity = intent.quantity_mentioned || conversationData.quantity || 1

          this.setConversationState(from, this.STATES.SPECIFYING, {
            ...conversationData,
            selected_products: selectedProducts,
            quantity: finalQuantity
          })
          break

        case 'ask_confirmation':
          const confirmQuantity = intent.quantity_mentioned || conversationData.quantity || 1

          // MEJORA: Usar productos del contexto si Gemini no detect√≥ productos correctamente
          let productsToConfirm = intent.products_mentioned
          if (productsToConfirm.length === 0 && conversationData.selected_products) {
            productsToConfirm = conversationData.selected_products
            console.log(`üîß CORRECCI√ìN: Usando productos del contexto:`, productsToConfirm)
          }

          console.log(`üîç DEBUG CASO NORMAL - Creando pending_order:`, {
            products: productsToConfirm,
            quantity: confirmQuantity
          })
          await this.handleAskConfirmation(from, intent, conversationData, customerName, productsToConfirm)
          this.setConversationState(from, this.STATES.CONFIRMING, {
            ...conversationData,
            pending_order: {
              products: productsToConfirm,
              quantity: confirmQuantity
            },
            order_processed: false  // Resetear para permitir nuevo pedido
          })
          break

        case 'process_order':
          if (intent.is_explicit_confirmation && currentState === this.STATES.CONFIRMING) {
            await this.handleProcessOrder(from, conversationData, customerName)
            this.setConversationState(from, this.STATES.PAYMENT)
          } else {
            // No es confirmaci√≥n expl√≠cita, pedir clarificaci√≥n
            await this.handleAskClarification(from, messageText, customerName, recentHistory)
          }
          break

        case 'emotional_response':
          // üé≠ NUEVO: Manejar respuestas emocionales
          await this.handleEmotionalResponse(from, messageText, intent, customerName, currentState)
          break

        default:
          // DETECTAR SOLICITUDES DE LISTA DE CATEGOR√çAS
          if (await this.esSolicitudListaCategorias(messageText)) {
            await this.mostrarListaCategorias(from, customerName)
            this.setConversationState(from, this.STATES.BROWSING)
            return
          }

          // DETECTAR SOLICITUDES DE CATEGOR√çAS ESPEC√çFICAS
          const categoriaDetectada = await this.detectarSolicitudCategoria(messageText)
          if (categoriaDetectada) {
            await this.handleCategoryRequest(from, messageText, customerName, categoriaDetectada)
            this.setConversationState(from, this.STATES.BROWSING)
            return
          }

          // Respuesta general con contexto
          await this.handleGeneralResponse(from, messageText, customerName, products, currentState, recentHistory)
          break
      }
    } catch (error) {
      console.error('Error procesando intenci√≥n:', error)
      await this.sendMessage(from, 'Disculpa, tuve un problema. ¬øPodr√≠as repetir tu mensaje? ü§ñ')
    }
  }

  // M√©todos para manejar diferentes tipos de respuesta
  async handleShowProducts(from, customerName, products, recentHistory) {
    try {
      // Obtener productos destacados
      const productosDestacados = await this.inventory.getDestacados()

      if (productosDestacados.length > 0) {
        // Generar saludo personalizado seg√∫n historial del cliente
        const introMessage = await this.generatePersonalizedGreeting(from, customerName)
        await this.sendMessage(from, introMessage)
        this.addToHistory(from, 'assistant', introMessage)

        // Enviar cada producto destacado con su imagen (m√°ximo 5)
        const productosAMostrar = productosDestacados.slice(0, 5)
        for (const product of productosAMostrar) {
          await this.sendProductWithImage(from, product)
          // Peque√±a pausa entre productos para no saturar
          await new Promise(resolve => setTimeout(resolve, 1000))
        }

        // Sugerir categor√≠as para m√°s opciones
        await this.sugerirCategorias(from, customerName)
      } else {
        // Fallback: si no hay productos destacados, mostrar algunos productos normales
        const productosLimitados = products.slice(0, 3)
        const introMessage = `¬°Hola ${customerName}! üòä Aqu√≠ tienes algunos de nuestros productos disponibles:`
        await this.sendMessage(from, introMessage)
        this.addToHistory(from, 'assistant', introMessage)

        for (const product of productosLimitados) {
          await this.sendProductWithImage(from, product)
          await new Promise(resolve => setTimeout(resolve, 1000))
        }

        await this.sugerirCategorias(from, customerName)
      }
    } catch (error) {
      console.error('Error mostrando productos:', error)
      // Fallback en caso de error
      const response = await this.gemini.generateSalesResponse(
        'Muestra productos disponibles',
        customerName,
        products,
        this.STATES.INITIAL,
        recentHistory
      )
      await this.sendMessage(from, response)
      this.addToHistory(from, 'assistant', response)
    }
  }

  // üîê M√âTODOS ADMINISTRATIVOS

  // Verificar si un estado es administrativo
  isAdminState(state) {
    const adminStates = [
      this.STATES.ADMIN_AUTH,
      this.STATES.ADMIN_MENU,
      this.STATES.ADMIN_ADD_PRODUCT,
      this.STATES.ADMIN_UPDATE_PRODUCT,
      this.STATES.ADMIN_UPDATE_STOCK,
      this.STATES.ADMIN_QUERY_STATS,
      this.STATES.ADMIN_LIST_PRODUCTS
    ]
    return adminStates.includes(state)
  }

  // Detectar frases de activaci√≥n del modo administrativo
  isAdminModeActivation(messageText) {
    const text = messageText.toLowerCase().trim()
    const activationPhrases = [
      'modo admin',
      'modo administrador',
      'administrar',
      'panel admin',
      'acceso admin',
      'gesti√≥n admin',
      'admin mode',
      'administraci√≥n'
    ]

    return activationPhrases.some(phrase => text.includes(phrase))
  }

  // Detectar frases de desactivaci√≥n del modo administrativo
  isAdminModeDeactivation(messageText) {
    const text = messageText.toLowerCase().trim()
    const deactivationPhrases = [
      'salir admin',
      'modo ventas',
      'volver ventas',
      'salir administraci√≥n',
      'modo cliente',
      'exit admin',
      'cerrar admin',
      'finalizar admin'
    ]

    return deactivationPhrases.some(phrase => text.includes(phrase))
  }

  // Detectar comandos administrativos directos
  isDirectAdminCommand(text) {
    const directCommands = [
      'crear producto',
      'nuevo producto',
      'agregar producto',
      'actualizar stock',
      'cambiar precio',
      'modificar producto',
      'actualizar producto',
      'estad√≠sticas',
      'ventas hoy',
      'reporte ventas',
      'inventario bajo',
      'productos agotados',
      'listar productos',
      'ver productos',
      'salir admin',
      'salir del panel',
      'cerrar admin',
      'modo ventas',
      'volver ventas'
    ]

    return directCommands.some(command => text.includes(command))
  }

  // Procesar comandos administrativos directos
  async processDirectAdminCommand(from, text, conversationData) {
    try {
      console.log(`üîê Procesando comando directo: ${text}`)

      if (text.includes('crear producto') || text.includes('nuevo producto') || text.includes('agregar producto')) {
        // Ir directamente a creaci√≥n de producto
        await this.sendMessage(from,
          `üìù *Crear Nuevo Producto*\n\n` +
          `Vamos a crear un nuevo producto paso a paso.\n\n` +
          `Paso 1/6: Env√≠a el *nombre* del producto:`
        )
        this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
          ...conversationData,
          admin_step: 'name',
          product_data: {}
        })

      } else if (text.includes('estad√≠sticas') || text.includes('ventas hoy') || text.includes('reporte ventas')) {
        // Ir directamente a estad√≠sticas
        await this.handleAdminQueryStats(from, 'menu', conversationData)

      } else if (text.includes('listar productos') || text.includes('ver productos')) {
        // Ir directamente a listado
        await this.handleAdminListProducts(from, 'all', conversationData)

      } else if (text.includes('actualizar stock')) {
        // Ir directamente a actualizaci√≥n de stock
        await this.sendMessage(from,
          `üì¶ *Actualizar Stock*\n\n` +
          `Env√≠a el *ID* o *nombre* del producto para actualizar su stock:`
        )
        this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
          ...conversationData,
          admin_step: 'search'
        })

      } else if (text.includes('modificar producto') || text.includes('cambiar precio') || text.includes('actualizar producto')) {
        // Ir directamente a actualizaci√≥n de producto
        await this.sendMessage(from,
          `‚úèÔ∏è *Actualizar Producto*\n\n` +
          `Env√≠a el *ID* o *nombre* del producto que deseas actualizar:`
        )
        this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
          ...conversationData,
          admin_step: 'search'
        })

      } else if (text.includes('salir admin') || text.includes('salir del panel') || text.includes('cerrar admin') ||
                 text.includes('modo ventas') || text.includes('volver ventas')) {
        // Salir del modo administrativo
        await this.handleAdminModeDeactivation(from, await this.getCustomerName(from))

      } else {
        // Comando no reconocido, mostrar men√∫
        await this.sendMessage(from,
          `‚ùì Comando no reconocido: "${text}"\n\n` +
          `Aqu√≠ tienes el men√∫ de opciones:`
        )
        await this.showAdminMenu(from, await this.getCustomerName(from))
      }

    } catch (error) {
      console.error('Error procesando comando directo:', error)
      await this.sendMessage(from, '‚ùå Error procesando comando.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
    }
  }

  // Manejar activaci√≥n del modo administrativo
  async handleAdminModeActivation(from, messageText, customerName) {
    try {
      console.log(`üîê Activaci√≥n de modo administrativo solicitada por ${customerName}: ${messageText}`)

      // Verificar si el sistema administrativo est√° habilitado
      const adminEnabled = await this.db.getConfig('admin_system_enabled')
      if (adminEnabled !== 'true') {
        await this.sendMessage(from, '‚ùå El sistema administrativo est√° deshabilitado.')
        return
      }

      // Verificar si ya tiene una sesi√≥n administrativa activa
      const activeSession = await this.db.getActiveAdminSession(from)
      if (activeSession) {
        // Ya est√° autenticado, ir al men√∫
        await this.sendMessage(from,
          `üîê *Modo Administrativo Activado*\n\n` +
          `Ya tienes una sesi√≥n activa.\n` +
          `Bienvenido de vuelta al panel administrativo.`
        )
        await this.showAdminMenu(from, customerName)
        this.setConversationState(from, this.STATES.ADMIN_MENU)
        return
      }

      // Solicitar c√≥digo de autorizaci√≥n con mensaje personalizado
      await this.sendMessage(from,
        `üîê *Activando Modo Administrativo*\n\n` +
        `Hola ${customerName || 'Administrador'}, para acceder al modo administrativo necesito verificar tu identidad.\n\n` +
        `Por favor, env√≠a tu c√≥digo de autorizaci√≥n:\n\n` +
        `‚ö†Ô∏è *Importante:* Solo personal autorizado puede acceder a estas funciones.`
      )

      this.setConversationState(from, this.STATES.ADMIN_AUTH, {
        admin_command: messageText,
        admin_attempts: 0,
        activation_mode: true
      })

    } catch (error) {
      console.error('Error activando modo administrativo:', error)
      await this.sendMessage(from, '‚ùå Error activando modo administrativo.')
    }
  }

  // Manejar desactivaci√≥n del modo administrativo
  async handleAdminModeDeactivation(from, customerName) {
    try {
      console.log(`üîê Desactivaci√≥n de modo administrativo solicitada por ${customerName}`)

      // Cerrar sesi√≥n administrativa si existe
      const conversationData = this.getConversationData(from)
      if (conversationData && conversationData.admin_session_id) {
        await this.db.closeAdminSession(conversationData.admin_session_id)
      }

      // Volver al modo de ventas
      await this.sendMessage(from,
        `üëã *Modo Administrativo Desactivado*\n\n` +
        `Has salido del panel administrativo.\n` +
        `Volviendo al modo de ventas... üõí\n\n` +
        `¬°Hola ${customerName || 'cliente'}! ¬øEn qu√© puedo ayudarte hoy?`
      )

      this.setConversationState(from, this.STATES.BROWSING)

    } catch (error) {
      console.error('Error desactivando modo administrativo:', error)
      await this.sendMessage(from, '‚ùå Error desactivando modo administrativo.')
    }
  }

  // Manejar comando administrativo inicial
  async handleAdminCommand(from, messageText, customerName) {
    try {
      console.log(`üîê Comando administrativo detectado de ${customerName}: ${messageText}`)

      // Verificar si el sistema administrativo est√° habilitado
      const adminEnabled = await this.db.getConfig('admin_system_enabled')
      if (adminEnabled !== 'true') {
        await this.sendMessage(from, '‚ùå El sistema administrativo est√° deshabilitado.')
        return
      }

      // Verificar si ya tiene una sesi√≥n administrativa activa
      const activeSession = await this.db.getActiveAdminSession(from)
      if (activeSession) {
        // Ya est√° autenticado, ir al men√∫
        await this.showAdminMenu(from, customerName)
        this.setConversationState(from, this.STATES.ADMIN_MENU)
        return
      }

      // Solicitar c√≥digo de autorizaci√≥n
      await this.sendMessage(from,
        `üîê *Acceso Administrativo*\n\n` +
        `Para acceder a las funciones administrativas, env√≠a tu c√≥digo de autorizaci√≥n:\n\n` +
        `‚ö†Ô∏è *Importante:* Solo personal autorizado puede acceder a estas funciones.`
      )

      this.setConversationState(from, this.STATES.ADMIN_AUTH, {
        admin_command: messageText,
        admin_attempts: 0
      })

    } catch (error) {
      console.error('Error manejando comando administrativo:', error)
      await this.sendMessage(from, '‚ùå Error procesando comando administrativo.')
    }
  }

  // Procesar estados administrativos
  async processAdminState(from, messageText, currentState, conversationData) {
    try {
      switch (currentState) {
        case this.STATES.ADMIN_AUTH:
          await this.handleAdminAuth(from, messageText, conversationData)
          break

        case this.STATES.ADMIN_MENU:
          await this.handleAdminMenuSelection(from, messageText, conversationData)
          break

        case this.STATES.ADMIN_ADD_PRODUCT:
          await this.handleAdminAddProduct(from, messageText, conversationData)
          break

        case this.STATES.ADMIN_UPDATE_PRODUCT:
          await this.handleAdminUpdateProduct(from, messageText, conversationData)
          break

        case this.STATES.ADMIN_UPDATE_STOCK:
          await this.handleAdminUpdateStock(from, messageText, conversationData)
          break

        case this.STATES.ADMIN_QUERY_STATS:
          await this.handleAdminQueryStats(from, messageText, conversationData)
          break

        case this.STATES.ADMIN_LIST_PRODUCTS:
          await this.handleAdminListProducts(from, messageText, conversationData)
          break

        default:
          console.log(`‚ö†Ô∏è Estado administrativo no manejado: ${currentState}`)
          await this.sendMessage(from, '‚ùå Estado administrativo no v√°lido.')
          this.setConversationState(from, this.STATES.INITIAL)
      }
    } catch (error) {
      console.error('Error procesando estado administrativo:', error)
      await this.sendMessage(from, '‚ùå Error en operaci√≥n administrativa.')
      this.setConversationState(from, this.STATES.INITIAL)
    }
  }

  // üéØ NUEVO M√âTODO: Manejar recomendaciones espec√≠ficas inteligentes
  async handleRecommendSpecificProducts(from, messageText, customerName, products, recentHistory) {
    try {
      console.log(`üéØ INICIANDO recomendaciones espec√≠ficas para: ${customerName}`)

      // Usar el filtrado inteligente de productos
      const productFilter = this.gemini.filterProductsBySpecifications(products, recentHistory, messageText)

      if (productFilter.filteredProducts.length > 0) {
        console.log(`üéØ Productos filtrados encontrados: ${productFilter.filteredProducts.length}`)

        // üéØ MEJORA: Detectar si es una recomendaci√≥n espec√≠fica de UN solo producto
        const isSpecificRecommendation = this.detectSpecificRecommendation(messageText, recentHistory)
        let productsToRecommend = productFilter.filteredProducts

        if (isSpecificRecommendation) {
          // Si es recomendaci√≥n espec√≠fica, usar solo el producto m√°s relevante
          productsToRecommend = [productFilter.filteredProducts[0]]
          console.log(`üéØ RECOMENDACI√ìN ESPEC√çFICA detectada - usando solo: ${productsToRecommend[0].nombre}`)
        }

        // Generar respuesta con productos espec√≠ficamente recomendados
        const response = await this.gemini.generateSalesResponse(
          `Cliente busca recomendaci√≥n espec√≠fica: "${messageText}". RECOMIENDA ESPEC√çFICAMENTE estos productos filtrados que son ideales para su situaci√≥n.`,
          customerName,
          productsToRecommend, // Usar productos filtrados (1 o varios seg√∫n el contexto)
          this.STATES.INTERESTED,
          recentHistory
        )

        await this.sendMessage(from, response)
        this.addToHistory(from, 'assistant', response)

        // üéØ MEJORA: Enviar im√°genes seg√∫n el tipo de recomendaci√≥n
        const topProducts = isSpecificRecommendation ?
          [productsToRecommend[0]] : // Solo 1 producto si es recomendaci√≥n espec√≠fica
          productsToRecommend.slice(0, 3) // Hasta 3 productos si es recomendaci√≥n general

        for (let i = 0; i < topProducts.length; i++) {
          const product = topProducts[i]
          await new Promise(resolve => setTimeout(resolve, 2000)) // Delay entre im√°genes
          await this.sendTyping(from)

          const productMessage = `*${product.nombre}* - S/ ${product.precio}\nüìã ${product.descripcion}\n‚ú® ${product.reasons.join(', ')}`
          await this.sendProductWithImage(from, product, productMessage)
        }

        // Guardar productos recomendados en el contexto
        this.setConversationState(from, this.STATES.INTERESTED, {
          ...this.getConversationData(from),
          interested_products: productsToRecommend.map(p => ({
            id: p.id,
            name: p.nombre
          })),
          last_recommendation: {
            message: messageText,
            products: productsToRecommend.map(p => p.nombre),
            timestamp: Date.now(),
            isSpecific: isSpecificRecommendation
          }
        })

      } else {
        console.log(`üéØ No se encontraron productos espec√≠ficos, usando recomendaci√≥n general`)

        // Fallback: usar respuesta general con todos los productos
        const response = await this.gemini.generateSalesResponse(
          `Cliente busca recomendaci√≥n: "${messageText}". Recomienda productos del inventario que mejor se adapten a su necesidad.`,
          customerName,
          products,
          this.STATES.INTERESTED,
          recentHistory
        )

        await this.sendMessage(from, response)
        this.addToHistory(from, 'assistant', response)
      }

    } catch (error) {
      console.error('Error en recomendaciones espec√≠ficas:', error)

      // Fallback en caso de error
      const response = await this.gemini.generateSalesResponse(
        `Cliente busca recomendaci√≥n: "${messageText}". Ay√∫dalo a encontrar el producto ideal.`,
        customerName,
        products,
        this.STATES.INTERESTED,
        recentHistory
      )
      await this.sendMessage(from, response)
      this.addToHistory(from, 'assistant', response)
    }
  }

  // üéØ NUEVO M√âTODO: Detectar si es una recomendaci√≥n espec√≠fica de un solo producto
  detectSpecificRecommendation(messageText, recentHistory) {
    const message = messageText.toLowerCase()
    const recentMessages = recentHistory.slice(-3).map(h => h.message.toLowerCase()).join(' ')

    // Palabras clave que indican recomendaci√≥n espec√≠fica
    const specificKeywords = [
      'te recomiendo',
      'recomiendo',
      'ideal para',
      'perfecto para',
      'mejor opci√≥n',
      'espec√≠ficamente',
      'en particular',
      'especialmente'
    ]

    // Palabras que indican uso espec√≠fico (contexto de la conversaci√≥n)
    const specificUseKeywords = [
      'para piscina',
      'para ba√±o',
      'para cocina',
      'para ventana',
      'para puerta',
      'para seguridad',
      'para privacidad'
    ]

    // Verificar si hay indicadores de recomendaci√≥n espec√≠fica
    const hasSpecificRecommendation = specificKeywords.some(keyword =>
      message.includes(keyword) || recentMessages.includes(keyword)
    )

    const hasSpecificUse = specificUseKeywords.some(keyword =>
      message.includes(keyword) || recentMessages.includes(keyword)
    )

    return hasSpecificRecommendation || hasSpecificUse
  }

  // üîê MANEJAR AUTENTICACI√ìN ADMINISTRATIVA
  async handleAdminAuth(from, messageText, conversationData) {
    try {
      const codigo = messageText.trim().toUpperCase()
      const maxAttempts = parseInt(await this.db.getConfig('admin_max_attempts')) || 3
      const currentAttempts = conversationData.admin_attempts || 0

      console.log(`üîê Intento de autenticaci√≥n: ${codigo} (intento ${currentAttempts + 1}/${maxAttempts})`)

      // Validar c√≥digo
      const validation = await this.db.validateAdminCode(codigo)

      if (validation.valid) {
        // C√≥digo v√°lido - crear sesi√≥n administrativa
        const sessionId = await this.db.createAdminSession(from, codigo, conversationData.admin_command)

        if (sessionId) {
          await this.sendMessage(from,
            `‚úÖ *Acceso Autorizado*\n\n` +
            `Bienvenido al panel administrativo.\n` +
            `Sesi√≥n iniciada correctamente.`
          )

          // Mostrar men√∫ administrativo
          await this.showAdminMenu(from, await this.getCustomerName(from))
          this.setConversationState(from, this.STATES.ADMIN_MENU, {
            admin_session_id: sessionId,
            admin_code: codigo
          })
        } else {
          await this.sendMessage(from, '‚ùå Error creando sesi√≥n administrativa.')
          this.setConversationState(from, this.STATES.INITIAL)
        }

      } else {
        // C√≥digo inv√°lido
        const newAttempts = currentAttempts + 1

        if (newAttempts >= maxAttempts) {
          await this.sendMessage(from,
            `‚ùå *Acceso Denegado*\n\n` +
            `Has excedido el n√∫mero m√°ximo de intentos (${maxAttempts}).\n` +
            `Acceso bloqueado temporalmente.`
          )
          this.setConversationState(from, this.STATES.INITIAL)
        } else {
          await this.sendMessage(from,
            `‚ùå C√≥digo incorrecto.\n\n` +
            `Intentos restantes: ${maxAttempts - newAttempts}\n` +
            `Env√≠a el c√≥digo de autorizaci√≥n correcto:`
          )
          this.setConversationState(from, this.STATES.ADMIN_AUTH, {
            ...conversationData,
            admin_attempts: newAttempts
          })
        }

        // Registrar intento fallido
        await this.db.registerFailedAttempt(codigo)
      }

    } catch (error) {
      console.error('Error en autenticaci√≥n administrativa:', error)
      await this.sendMessage(from, '‚ùå Error en el proceso de autenticaci√≥n.')
      this.setConversationState(from, this.STATES.INITIAL)
    }
  }

  // üîê MOSTRAR MEN√ö ADMINISTRATIVO
  async showAdminMenu(from, customerName) {
    const menuMessage =
      `üîê *Panel Administrativo Activado*\n` +
      `Hola ${customerName || 'Administrador'}, est√°s en modo administrativo.\n\n` +
      `Selecciona una opci√≥n:\n\n` +
      `1Ô∏è‚É£ *Crear nuevo producto*\n` +
      `2Ô∏è‚É£ *Actualizar producto existente*\n` +
      `3Ô∏è‚É£ *Actualizar stock*\n` +
      `4Ô∏è‚É£ *Consultar estad√≠sticas*\n` +
      `5Ô∏è‚É£ *Listar productos*\n` +
      `6Ô∏è‚É£ *Salir del panel*\n\n` +
      `üí° *Tip:* Tambi√©n puedes escribir comandos directos como:\n` +
      `‚Ä¢ "crear producto"\n` +
      `‚Ä¢ "estad√≠sticas"\n` +
      `‚Ä¢ "salir admin" (para volver al modo ventas)\n\n` +
      `Env√≠a el n√∫mero de la opci√≥n o escribe tu comando:`

    await this.sendMessage(from, menuMessage)
  }

  // üîê MANEJAR SELECCI√ìN DEL MEN√ö ADMINISTRATIVO
  async handleAdminMenuSelection(from, messageText, conversationData) {
    try {
      const option = messageText.trim()
      const lowerText = messageText.toLowerCase().trim()

      // üîê PROCESAR COMANDOS DIRECTOS EN MODO ADMIN
      if (this.isDirectAdminCommand(lowerText)) {
        await this.processDirectAdminCommand(from, lowerText, conversationData)
        return
      }

      // üîê PROCESAR OPCIONES NUM√âRICAS DEL MEN√ö
      switch (option) {
        case '1':
          await this.sendMessage(from,
            `üìù *Crear Nuevo Producto*\n\n` +
            `Vamos a crear un nuevo producto paso a paso.\n\n` +
            `Paso 1/6: Env√≠a el *nombre* del producto:`
          )
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'name',
            product_data: {}
          })
          break

        case '2':
          await this.sendMessage(from,
            `‚úèÔ∏è *Actualizar Producto*\n\n` +
            `Env√≠a el *ID* o *nombre* del producto que deseas actualizar:`
          )
          this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
            ...conversationData,
            admin_step: 'search'
          })
          break

        case '3':
          await this.sendMessage(from,
            `üì¶ *Actualizar Stock*\n\n` +
            `Env√≠a el *ID* o *nombre* del producto para actualizar su stock:`
          )
          this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
            ...conversationData,
            admin_step: 'search'
          })
          break

        case '4':
          await this.handleAdminQueryStats(from, 'menu', conversationData)
          break

        case '5':
          await this.handleAdminListProducts(from, 'all', conversationData)
          break

        case '6':
          // Cerrar sesi√≥n administrativa
          if (conversationData.admin_session_id) {
            await this.db.closeAdminSession(conversationData.admin_session_id)
          }
          await this.sendMessage(from,
            `üëã *Sesi√≥n Cerrada*\n\n` +
            `Has salido del panel administrativo.\n` +
            `¬°Hasta luego!`
          )
          this.setConversationState(from, this.STATES.INITIAL)
          break

        default:
          await this.sendMessage(from,
            `‚ùå Opci√≥n no v√°lida.\n\n` +
            `Por favor, env√≠a un n√∫mero del 1 al 6:`
          )
          await this.showAdminMenu(from, await this.getCustomerName(from))
      }

    } catch (error) {
      console.error('Error en selecci√≥n de men√∫ administrativo:', error)
      await this.sendMessage(from, '‚ùå Error procesando selecci√≥n.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
    }
  }

  // üîê MANEJAR CREACI√ìN DE PRODUCTO
  async handleAdminAddProduct(from, messageText, conversationData) {
    try {
      const step = conversationData.admin_step
      const productData = conversationData.product_data || {}

      switch (step) {
        case 'name':
          productData.nombre = messageText.trim()
          await this.sendMessage(from,
            `‚úÖ Nombre: ${productData.nombre}\n\n` +
            `Paso 2/6: Env√≠a la *descripci√≥n* del producto:`
          )
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'description',
            product_data: productData
          })
          break

        case 'description':
          productData.descripcion = messageText.trim()
          await this.sendMessage(from,
            `‚úÖ Descripci√≥n: ${productData.descripcion}\n\n` +
            `Paso 3/6: Env√≠a el *precio* del producto (solo n√∫mero):`
          )
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'price',
            product_data: productData
          })
          break

        case 'price':
          const precio = parseFloat(messageText.trim())
          if (isNaN(precio) || precio <= 0) {
            await this.sendMessage(from,
              `‚ùå Precio inv√°lido.\n\n` +
              `Env√≠a un n√∫mero v√°lido mayor a 0:`
            )
            return
          }
          productData.precio = precio
          await this.sendMessage(from,
            `‚úÖ Precio: S/ ${productData.precio}\n\n` +
            `Paso 4/6: Env√≠a el *stock inicial* (solo n√∫mero):`
          )
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'stock',
            product_data: productData
          })
          break

        case 'stock':
          const stock = parseInt(messageText.trim())
          if (isNaN(stock) || stock < 0) {
            await this.sendMessage(from,
              `‚ùå Stock inv√°lido.\n\n` +
              `Env√≠a un n√∫mero v√°lido mayor o igual a 0:`
            )
            return
          }
          productData.stock = stock
          await this.sendMessage(from,
            `‚úÖ Stock: ${productData.stock} unidades\n\n` +
            `Paso 5/6: Env√≠a la *categor√≠a* del producto:`
          )
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'category',
            product_data: productData
          })
          break

        case 'category':
          productData.categoria = messageText.trim()
          await this.sendMessage(from,
            `‚úÖ Categor√≠a: ${productData.categoria}\n\n` +
            `Paso 6/6: Env√≠a la *URL de imagen* del producto (o escribe "sin imagen"):`
          )
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'image',
            product_data: productData
          })
          break

        case 'image':
          productData.imagen_url = messageText.trim().toLowerCase() === 'sin imagen' ? '' : messageText.trim()

          // Mostrar resumen y confirmar
          const resumen =
            `üìã *Resumen del Producto*\n\n` +
            `‚Ä¢ *Nombre:* ${productData.nombre}\n` +
            `‚Ä¢ *Descripci√≥n:* ${productData.descripcion}\n` +
            `‚Ä¢ *Precio:* S/ ${productData.precio}\n` +
            `‚Ä¢ *Stock:* ${productData.stock} unidades\n` +
            `‚Ä¢ *Categor√≠a:* ${productData.categoria}\n` +
            `‚Ä¢ *Imagen:* ${productData.imagen_url || 'Sin imagen'}\n\n` +
            `¬øConfirmas la creaci√≥n del producto?\n` +
            `Responde *SI* para confirmar o *NO* para cancelar:`

          await this.sendMessage(from, resumen)
          this.setConversationState(from, this.STATES.ADMIN_ADD_PRODUCT, {
            ...conversationData,
            admin_step: 'confirm',
            product_data: productData
          })
          break

        case 'confirm':
          const response = messageText.trim().toLowerCase()
          if (response === 'si' || response === 's√≠') {
            try {
              // Crear el producto
              const newProduct = await this.inventory.addProduct(productData)

              await this.sendMessage(from,
                `‚úÖ *Producto Creado Exitosamente*\n\n` +
                `‚Ä¢ *ID:* ${newProduct.id}\n` +
                `‚Ä¢ *Nombre:* ${newProduct.nombre}\n` +
                `‚Ä¢ *Precio:* S/ ${newProduct.precio}\n\n` +
                `El producto ha sido agregado al inventario.`
              )

              // Volver al men√∫ administrativo
              await this.showAdminMenu(from, await this.getCustomerName(from))
              this.setConversationState(from, this.STATES.ADMIN_MENU, {
                admin_session_id: conversationData.admin_session_id,
                admin_code: conversationData.admin_code
              })

            } catch (error) {
              console.error('Error creando producto:', error)
              await this.sendMessage(from,
                `‚ùå Error creando el producto: ${error.message}\n\n` +
                `Intenta nuevamente.`
              )
              await this.showAdminMenu(from, await this.getCustomerName(from))
              this.setConversationState(from, this.STATES.ADMIN_MENU, {
                admin_session_id: conversationData.admin_session_id,
                admin_code: conversationData.admin_code
              })
            }
          } else {
            await this.sendMessage(from,
              `‚ùå Creaci√≥n de producto cancelada.\n\n` +
              `Volviendo al men√∫ principal...`
            )
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          }
          break

        default:
          await this.sendMessage(from, '‚ùå Estado de creaci√≥n no v√°lido.')
          await this.showAdminMenu(from, await this.getCustomerName(from))
          this.setConversationState(from, this.STATES.ADMIN_MENU, {
            admin_session_id: conversationData.admin_session_id,
            admin_code: conversationData.admin_code
          })
      }

    } catch (error) {
      console.error('Error en creaci√≥n de producto:', error)
      await this.sendMessage(from, '‚ùå Error en el proceso de creaci√≥n.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
      this.setConversationState(from, this.STATES.ADMIN_MENU, {
        admin_session_id: conversationData.admin_session_id,
        admin_code: conversationData.admin_code
      })
    }
  }

  // üîê MANEJAR CONSULTA DE ESTAD√çSTICAS
  async handleAdminQueryStats(from, messageText, conversationData) {
    try {
      if (messageText === 'menu') {
        // Mostrar opciones de estad√≠sticas
        const statsMenu =
          `üìä *Consultar Estad√≠sticas*\n\n` +
          `Selecciona el tipo de consulta:\n\n` +
          `1Ô∏è‚É£ *Ventas de hoy*\n` +
          `2Ô∏è‚É£ *Estad√≠sticas generales*\n` +
          `3Ô∏è‚É£ *Productos m√°s vendidos*\n` +
          `4Ô∏è‚É£ *Inventario bajo stock*\n` +
          `5Ô∏è‚É£ *Volver al men√∫ principal*\n\n` +
          `Env√≠a el n√∫mero de la opci√≥n:`

        await this.sendMessage(from, statsMenu)
        this.setConversationState(from, this.STATES.ADMIN_QUERY_STATS, {
          ...conversationData,
          admin_step: 'select'
        })
        return
      }

      // üîÑ MANEJAR RESPUESTA SI/NO DESPU√âS DE MOSTRAR ESTAD√çSTICAS
      if (conversationData.admin_step === 'continue') {
        const response = messageText.trim().toLowerCase()

        if (response === 'si' || response === 's√≠' || response === 's') {
          // Usuario quiere ver m√°s estad√≠sticas - mostrar men√∫ nuevamente
          await this.handleAdminQueryStats(from, 'menu', conversationData)
          return
        } else if (response === 'no' || response === 'n') {
          // Usuario quiere volver al men√∫ principal
          await this.showAdminMenu(from, await this.getCustomerName(from))
          this.setConversationState(from, this.STATES.ADMIN_MENU, {
            admin_session_id: conversationData.admin_session_id,
            admin_code: conversationData.admin_code
          })
          return
        } else {
          // Respuesta no v√°lida para SI/NO
          await this.sendMessage(from,
            `‚ùå Respuesta no v√°lida.\n\n` +
            `Responde *SI* para ver el men√∫ de estad√≠sticas o *NO* para volver al panel principal:`
          )
          return
        }
      }

      const option = messageText.trim()
      switch (option) {
        case '1':
          // Ventas de hoy
          const todayStats = await this.sales.getEstadisticasGenerales()
          const ventasHoyMsg =
            `üìà *Ventas de Hoy*\n\n` +
            `‚Ä¢ *Ventas:* ${todayStats.ventas_hoy || 0}\n` +
            `‚Ä¢ *Ingresos:* S/ ${todayStats.ingresos_hoy || 0}\n\n` +
            `Fecha: ${new Date().toLocaleDateString()}`

          await this.sendMessage(from, ventasHoyMsg)
          break

        case '2':
          // Estad√≠sticas generales
          const generalStats = await this.sales.getEstadisticasGenerales()
          const generalMsg =
            `üìä *Estad√≠sticas Generales*\n\n` +
            `‚Ä¢ *Total Clientes:* ${generalStats.total_clientes || 0}\n` +
            `‚Ä¢ *Total Ventas:* ${generalStats.total_ventas || 0}\n` +
            `‚Ä¢ *Productos Vendidos:* ${generalStats.productos_vendidos || 0}\n` +
            `‚Ä¢ *Ingresos Totales:* S/ ${generalStats.ingresos_totales || 0}\n` +
            `‚Ä¢ *Venta Promedio:* S/ ${(generalStats.venta_promedio || 0).toFixed(2)}`

          await this.sendMessage(from, generalMsg)
          break

        case '3':
          // Productos m√°s vendidos
          const topProducts = await this.sales.getProductosMasVendidos(null, 5)
          let topMsg = `üèÜ *Top 5 Productos M√°s Vendidos*\n\n`

          if (topProducts.length > 0) {
            topProducts.forEach((product, index) => {
              topMsg += `${index + 1}Ô∏è‚É£ *${product.producto_nombre}*\n`
              topMsg += `   Vendidos: ${product.total_vendido}\n`
              topMsg += `   Ingresos: S/ ${product.total_ingresos}\n\n`
            })
          } else {
            topMsg += `No hay datos de ventas disponibles.`
          }

          await this.sendMessage(from, topMsg)
          break

        case '4':
          // Inventario bajo stock
          const allProducts = await this.inventory.getAllProducts()
          const lowStock = allProducts.filter(p => p.stock <= 5)

          let lowStockMsg = `‚ö†Ô∏è *Productos con Stock Bajo*\n\n`

          if (lowStock.length > 0) {
            lowStock.forEach(product => {
              lowStockMsg += `‚Ä¢ *${product.nombre}*\n`
              lowStockMsg += `  Stock: ${product.stock} unidades\n`
              lowStockMsg += `  ID: ${product.id}\n\n`
            })
          } else {
            lowStockMsg += `‚úÖ Todos los productos tienen stock suficiente.`
          }

          await this.sendMessage(from, lowStockMsg)
          break

        case '5':
          // Volver al men√∫ principal
          await this.showAdminMenu(from, await this.getCustomerName(from))
          this.setConversationState(from, this.STATES.ADMIN_MENU, {
            admin_session_id: conversationData.admin_session_id,
            admin_code: conversationData.admin_code
          })
          return

        default:
          await this.sendMessage(from,
            `‚ùå Opci√≥n no v√°lida.\n\n` +
            `Env√≠a un n√∫mero del 1 al 5:`
          )
          return
      }

      // Despu√©s de mostrar estad√≠sticas, preguntar si quiere ver m√°s
      await this.sendMessage(from,
        `¬øDeseas consultar otras estad√≠sticas?\n\n` +
        `Responde *SI* para ver el men√∫ o *NO* para volver al panel principal:`
      )

      this.setConversationState(from, this.STATES.ADMIN_QUERY_STATS, {
        ...conversationData,
        admin_step: 'continue'
      })

    } catch (error) {
      console.error('Error consultando estad√≠sticas:', error)
      await this.sendMessage(from, '‚ùå Error consultando estad√≠sticas.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
      this.setConversationState(from, this.STATES.ADMIN_MENU, {
        admin_session_id: conversationData.admin_session_id,
        admin_code: conversationData.admin_code
      })
    }
  }

  // üîê MANEJAR LISTADO DE PRODUCTOS
  async handleAdminListProducts(from, messageText, conversationData) {
    try {
      const products = await this.inventory.getAllProducts()

      if (products.length === 0) {
        await this.sendMessage(from,
          `üì¶ *Inventario Vac√≠o*\n\n` +
          `No hay productos en el inventario.`
        )
      } else {
        let productList = `üì¶ *Lista de Productos* (${products.length} productos)\n\n`

        products.forEach((product, index) => {
          productList += `${index + 1}. *${product.nombre}*\n`
          productList += `   ID: ${product.id} | Stock: ${product.stock}\n`
          productList += `   Precio: S/ ${product.precio} | Cat: ${product.categoria}\n\n`

          // Limitar a 10 productos por mensaje para evitar mensajes muy largos
          if ((index + 1) % 10 === 0 && index < products.length - 1) {
            productList += `_Contin√∫a..._`
          }
        })

        await this.sendMessage(from, productList)
      }

      // Volver al men√∫ principal
      await this.sendMessage(from,
        `¬øDeseas realizar otra operaci√≥n?\n\n` +
        `Responde cualquier cosa para volver al men√∫ principal:`
      )

      this.setConversationState(from, this.STATES.ADMIN_MENU, {
        admin_session_id: conversationData.admin_session_id,
        admin_code: conversationData.admin_code
      })

    } catch (error) {
      console.error('Error listando productos:', error)
      await this.sendMessage(from, '‚ùå Error obteniendo lista de productos.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
      this.setConversationState(from, this.STATES.ADMIN_MENU, {
        admin_session_id: conversationData.admin_session_id,
        admin_code: conversationData.admin_code
      })
    }
  }

  // üîê MANEJAR ACTUALIZACI√ìN DE PRODUCTO
  async handleAdminUpdateProduct(from, messageText, conversationData) {
    try {
      const step = conversationData.admin_step || 'search'
      const productData = conversationData.product_data || {}

      switch (step) {
        case 'search':
          // Buscar producto por ID o nombre
          const searchTerm = messageText.trim()

          if (searchTerm.toLowerCase() === 'cancelar') {
            await this.sendMessage(from, `‚ùå *Operaci√≥n Cancelada*\n\nVolviendo al men√∫ principal...`)
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
            return
          }

          // Buscar productos que coincidan
          const products = await this.inventory.searchProducts(searchTerm)

          if (products.length === 0) {
            await this.sendMessage(from,
              `‚ùå *Producto No Encontrado*\n\n` +
              `No se encontr√≥ ning√∫n producto con: "${searchTerm}"\n\n` +
              `Intenta con:\n` +
              `‚Ä¢ ID del producto (ej: 1, 2, 3)\n` +
              `‚Ä¢ Nombre completo o parcial\n` +
              `‚Ä¢ Escribe "cancelar" para volver al men√∫\n\n` +
              `Env√≠a otro t√©rmino de b√∫squeda:`
            )
            return
          }

          if (products.length === 1) {
            // Solo un producto encontrado, proceder directamente
            const product = products[0]
            await this.sendMessage(from,
              `‚úÖ *Producto Encontrado*\n\n` +
              `üì¶ *${product.nombre}*\n` +
              `üí∞ Precio: S/ ${product.precio}\n` +
              `üìä Stock: ${product.stock} unidades\n` +
              `üìù Descripci√≥n: ${product.descripcion}\n` +
              `üè∑Ô∏è Categor√≠a: ${product.categoria}\n\n` +
              `¬øQu√© deseas actualizar?\n\n` +
              `1Ô∏è‚É£ Nombre\n` +
              `2Ô∏è‚É£ Precio\n` +
              `3Ô∏è‚É£ Descripci√≥n\n` +
              `4Ô∏è‚É£ Categor√≠a\n` +
              `5Ô∏è‚É£ Imagen URL\n` +
              `6Ô∏è‚É£ Cancelar\n\n` +
              `Env√≠a el n√∫mero de la opci√≥n:`
            )

            this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
              ...conversationData,
              admin_step: 'select_field',
              product_data: { ...product }
            })
          } else {
            // M√∫ltiples productos encontrados
            let productList = `üîç *Productos Encontrados*\n\n`
            products.slice(0, 10).forEach((product, index) => {
              productList += `${index + 1}Ô∏è‚É£ *${product.nombre}* (ID: ${product.id})\n`
              productList += `   üí∞ S/ ${product.precio} | üìä Stock: ${product.stock}\n\n`
            })

            productList += `Env√≠a el *n√∫mero* del producto que deseas actualizar:`

            await this.sendMessage(from, productList)

            this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
              ...conversationData,
              admin_step: 'select_product',
              product_data: { search_results: products }
            })
          }
          break

        case 'select_product':
          // Seleccionar producto de la lista
          const productIndex = parseInt(messageText.trim()) - 1
          const searchResults = productData.search_results || []

          if (isNaN(productIndex) || productIndex < 0 || productIndex >= searchResults.length) {
            await this.sendMessage(from,
              `‚ùå *Selecci√≥n Inv√°lida*\n\n` +
              `Por favor, env√≠a un n√∫mero del 1 al ${searchResults.length}:`
            )
            return
          }

          const selectedProduct = searchResults[productIndex]
          await this.sendMessage(from,
            `‚úÖ *Producto Seleccionado*\n\n` +
            `üì¶ *${selectedProduct.nombre}*\n` +
            `üí∞ Precio: S/ ${selectedProduct.precio}\n` +
            `üìä Stock: ${selectedProduct.stock} unidades\n` +
            `üìù Descripci√≥n: ${selectedProduct.descripcion}\n` +
            `üè∑Ô∏è Categor√≠a: ${selectedProduct.categoria}\n\n` +
            `¬øQu√© deseas actualizar?\n\n` +
            `1Ô∏è‚É£ Nombre\n` +
            `2Ô∏è‚É£ Precio\n` +
            `3Ô∏è‚É£ Descripci√≥n\n` +
            `4Ô∏è‚É£ Categor√≠a\n` +
            `5Ô∏è‚É£ Imagen URL\n` +
            `6Ô∏è‚É£ Cancelar\n\n` +
            `Env√≠a el n√∫mero de la opci√≥n:`
          )

          this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
            ...conversationData,
            admin_step: 'select_field',
            product_data: { ...selectedProduct }
          })
          break

        case 'select_field':
          // Seleccionar campo a actualizar
          const fieldOption = messageText.trim()

          switch (fieldOption) {
            case '1':
              await this.sendMessage(from,
                `‚úèÔ∏è *Actualizar Nombre*\n\n` +
                `Nombre actual: *${productData.nombre}*\n\n` +
                `Env√≠a el nuevo nombre del producto:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
                ...conversationData,
                admin_step: 'update_name'
              })
              break

            case '2':
              await this.sendMessage(from,
                `üí∞ *Actualizar Precio*\n\n` +
                `Precio actual: *S/ ${productData.precio}*\n\n` +
                `Env√≠a el nuevo precio (solo el n√∫mero, ej: 25.50):`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
                ...conversationData,
                admin_step: 'update_price'
              })
              break

            case '3':
              await this.sendMessage(from,
                `üìù *Actualizar Descripci√≥n*\n\n` +
                `Descripci√≥n actual: *${productData.descripcion}*\n\n` +
                `Env√≠a la nueva descripci√≥n del producto:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
                ...conversationData,
                admin_step: 'update_description'
              })
              break

            case '4':
              await this.sendMessage(from,
                `üè∑Ô∏è *Actualizar Categor√≠a*\n\n` +
                `Categor√≠a actual: *${productData.categoria}*\n\n` +
                `Env√≠a la nueva categor√≠a del producto:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
                ...conversationData,
                admin_step: 'update_category'
              })
              break

            case '5':
              await this.sendMessage(from,
                `üñºÔ∏è *Actualizar Imagen*\n\n` +
                `URL actual: *${productData.imagen_url || 'Sin imagen'}*\n\n` +
                `Env√≠a la nueva URL de la imagen:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_PRODUCT, {
                ...conversationData,
                admin_step: 'update_image'
              })
              break

            case '6':
              await this.sendMessage(from, `‚ùå *Operaci√≥n Cancelada*\n\nVolviendo al men√∫ principal...`)
              await this.showAdminMenu(from, await this.getCustomerName(from))
              this.setConversationState(from, this.STATES.ADMIN_MENU, {
                admin_session_id: conversationData.admin_session_id,
                admin_code: conversationData.admin_code
              })
              break

            default:
              await this.sendMessage(from,
                `‚ùå *Opci√≥n Inv√°lida*\n\n` +
                `Por favor, env√≠a un n√∫mero del 1 al 6:`
              )
          }
          break

        case 'update_name':
          // Actualizar nombre del producto
          const newName = messageText.trim()

          if (newName.length < 3) {
            await this.sendMessage(from,
              `‚ùå *Nombre Muy Corto*\n\n` +
              `El nombre debe tener al menos 3 caracteres.\n` +
              `Env√≠a un nombre v√°lido:`
            )
            return
          }

          try {
            await this.inventory.updateProduct(productData.id, { nombre: newName })
            await this.sendMessage(from,
              `‚úÖ *Nombre Actualizado*\n\n` +
              `üì¶ Producto: *${newName}*\n` +
              `‚úèÔ∏è Nombre anterior: ${productData.nombre}\n` +
              `‚úèÔ∏è Nombre nuevo: *${newName}*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error actualizando nombre:', error)
            await this.sendMessage(from, `‚ùå Error actualizando el nombre del producto.`)
          }
          break

        case 'update_price':
          // Actualizar precio del producto
          const newPrice = parseFloat(messageText.trim())

          if (isNaN(newPrice) || newPrice <= 0) {
            await this.sendMessage(from,
              `‚ùå *Precio Inv√°lido*\n\n` +
              `El precio debe ser un n√∫mero mayor a 0.\n` +
              `Ejemplo: 25.50\n\n` +
              `Env√≠a un precio v√°lido:`
            )
            return
          }

          try {
            await this.inventory.updateProduct(productData.id, { precio: newPrice })
            await this.sendMessage(from,
              `‚úÖ *Precio Actualizado*\n\n` +
              `üì¶ Producto: *${productData.nombre}*\n` +
              `üí∞ Precio anterior: S/ ${productData.precio}\n` +
              `üí∞ Precio nuevo: *S/ ${newPrice}*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error actualizando precio:', error)
            await this.sendMessage(from, `‚ùå Error actualizando el precio del producto.`)
          }
          break

        case 'update_description':
          // Actualizar descripci√≥n del producto
          const newDescription = messageText.trim()

          if (newDescription.length < 10) {
            await this.sendMessage(from,
              `‚ùå *Descripci√≥n Muy Corta*\n\n` +
              `La descripci√≥n debe tener al menos 10 caracteres.\n` +
              `Env√≠a una descripci√≥n m√°s detallada:`
            )
            return
          }

          try {
            await this.inventory.updateProduct(productData.id, { descripcion: newDescription })
            await this.sendMessage(from,
              `‚úÖ *Descripci√≥n Actualizada*\n\n` +
              `üì¶ Producto: *${productData.nombre}*\n` +
              `üìù Descripci√≥n anterior: ${productData.descripcion}\n` +
              `üìù Descripci√≥n nueva: *${newDescription}*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error actualizando descripci√≥n:', error)
            await this.sendMessage(from, `‚ùå Error actualizando la descripci√≥n del producto.`)
          }
          break

        case 'update_category':
          // Actualizar categor√≠a del producto
          const newCategory = messageText.trim()

          if (newCategory.length < 3) {
            await this.sendMessage(from,
              `‚ùå *Categor√≠a Muy Corta*\n\n` +
              `La categor√≠a debe tener al menos 3 caracteres.\n` +
              `Env√≠a una categor√≠a v√°lida:`
            )
            return
          }

          try {
            await this.inventory.updateProduct(productData.id, { categoria: newCategory })
            await this.sendMessage(from,
              `‚úÖ *Categor√≠a Actualizada*\n\n` +
              `üì¶ Producto: *${productData.nombre}*\n` +
              `üè∑Ô∏è Categor√≠a anterior: ${productData.categoria}\n` +
              `üè∑Ô∏è Categor√≠a nueva: *${newCategory}*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error actualizando categor√≠a:', error)
            await this.sendMessage(from, `‚ùå Error actualizando la categor√≠a del producto.`)
          }
          break

        case 'update_image':
          // Actualizar imagen del producto
          const newImageUrl = messageText.trim()

          // Validar URL b√°sica
          if (newImageUrl && !newImageUrl.match(/^https?:\/\/.+/)) {
            await this.sendMessage(from,
              `‚ùå *URL Inv√°lida*\n\n` +
              `La URL debe comenzar con http:// o https://\n` +
              `Ejemplo: https://ejemplo.com/imagen.jpg\n\n` +
              `Env√≠a una URL v√°lida o "sin imagen" para quitar la imagen:`
            )
            return
          }

          try {
            const finalImageUrl = newImageUrl.toLowerCase() === 'sin imagen' ? null : newImageUrl
            await this.inventory.updateProduct(productData.id, { imagen_url: finalImageUrl })

            await this.sendMessage(from,
              `‚úÖ *Imagen Actualizada*\n\n` +
              `üì¶ Producto: *${productData.nombre}*\n` +
              `üñºÔ∏è URL anterior: ${productData.imagen_url || 'Sin imagen'}\n` +
              `üñºÔ∏è URL nueva: *${finalImageUrl || 'Sin imagen'}*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error actualizando imagen:', error)
            await this.sendMessage(from, `‚ùå Error actualizando la imagen del producto.`)
          }
          break

        default:
          await this.sendMessage(from, `‚ùå Estado no v√°lido. Volviendo al men√∫ principal...`)
          await this.showAdminMenu(from, await this.getCustomerName(from))
          this.setConversationState(from, this.STATES.ADMIN_MENU, {
            admin_session_id: conversationData.admin_session_id,
            admin_code: conversationData.admin_code
          })
      }

    } catch (error) {
      console.error('Error en handleAdminUpdateProduct:', error)
      await this.sendMessage(from, '‚ùå Error procesando actualizaci√≥n de producto.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
      this.setConversationState(from, this.STATES.ADMIN_MENU, {
        admin_session_id: conversationData.admin_session_id,
        admin_code: conversationData.admin_code
      })
    }
  }

  // üîê MANEJAR ACTUALIZACI√ìN DE STOCK
  async handleAdminUpdateStock(from, messageText, conversationData) {
    try {
      const step = conversationData.admin_step || 'search'
      const productData = conversationData.product_data || {}

      switch (step) {
        case 'search':
          // Buscar producto por ID o nombre
          const searchTerm = messageText.trim()

          if (searchTerm.toLowerCase() === 'cancelar') {
            await this.sendMessage(from, `‚ùå *Operaci√≥n Cancelada*\n\nVolviendo al men√∫ principal...`)
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
            return
          }

          // Buscar productos que coincidan
          const products = await this.inventory.searchProducts(searchTerm)

          if (products.length === 0) {
            await this.sendMessage(from,
              `‚ùå *Producto No Encontrado*\n\n` +
              `No se encontr√≥ ning√∫n producto con: "${searchTerm}"\n\n` +
              `Intenta con:\n` +
              `‚Ä¢ ID del producto (ej: 1, 2, 3)\n` +
              `‚Ä¢ Nombre completo o parcial\n` +
              `‚Ä¢ Escribe "cancelar" para volver al men√∫\n\n` +
              `Env√≠a otro t√©rmino de b√∫squeda:`
            )
            return
          }

          if (products.length === 1) {
            // Solo un producto encontrado, proceder directamente
            const product = products[0]
            await this.sendMessage(from,
              `‚úÖ *Producto Encontrado*\n\n` +
              `üì¶ *${product.nombre}*\n` +
              `üìä Stock actual: *${product.stock} unidades*\n` +
              `üí∞ Precio: S/ ${product.precio}\n` +
              `üè∑Ô∏è Categor√≠a: ${product.categoria}\n\n` +
              `¬øQu√© tipo de actualizaci√≥n deseas hacer?\n\n` +
              `1Ô∏è‚É£ Establecer stock exacto\n` +
              `2Ô∏è‚É£ Agregar stock (suma)\n` +
              `3Ô∏è‚É£ Reducir stock (resta)\n` +
              `4Ô∏è‚É£ Cancelar\n\n` +
              `Env√≠a el n√∫mero de la opci√≥n:`
            )

            this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
              ...conversationData,
              admin_step: 'select_operation',
              product_data: { ...product }
            })
          } else {
            // M√∫ltiples productos encontrados
            let productList = `üîç *Productos Encontrados*\n\n`
            products.slice(0, 10).forEach((product, index) => {
              productList += `${index + 1}Ô∏è‚É£ *${product.nombre}* (ID: ${product.id})\n`
              productList += `   üìä Stock: ${product.stock} | üí∞ S/ ${product.precio}\n\n`
            })

            productList += `Env√≠a el *n√∫mero* del producto para actualizar su stock:`

            await this.sendMessage(from, productList)

            this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
              ...conversationData,
              admin_step: 'select_product',
              product_data: { search_results: products }
            })
          }
          break

        case 'select_product':
          // Seleccionar producto de la lista
          const productIndex = parseInt(messageText.trim()) - 1
          const searchResults = productData.search_results || []

          if (isNaN(productIndex) || productIndex < 0 || productIndex >= searchResults.length) {
            await this.sendMessage(from,
              `‚ùå *Selecci√≥n Inv√°lida*\n\n` +
              `Por favor, env√≠a un n√∫mero del 1 al ${searchResults.length}:`
            )
            return
          }

          const selectedProduct = searchResults[productIndex]
          await this.sendMessage(from,
            `‚úÖ *Producto Seleccionado*\n\n` +
            `üì¶ *${selectedProduct.nombre}*\n` +
            `üìä Stock actual: *${selectedProduct.stock} unidades*\n` +
            `üí∞ Precio: S/ ${selectedProduct.precio}\n` +
            `üè∑Ô∏è Categor√≠a: ${selectedProduct.categoria}\n\n` +
            `¬øQu√© tipo de actualizaci√≥n deseas hacer?\n\n` +
            `1Ô∏è‚É£ Establecer stock exacto\n` +
            `2Ô∏è‚É£ Agregar stock (suma)\n` +
            `3Ô∏è‚É£ Reducir stock (resta)\n` +
            `4Ô∏è‚É£ Cancelar\n\n` +
            `Env√≠a el n√∫mero de la opci√≥n:`
          )

          this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
            ...conversationData,
            admin_step: 'select_operation',
            product_data: { ...selectedProduct }
          })
          break

        case 'select_operation':
          // Seleccionar tipo de operaci√≥n
          const operation = messageText.trim()

          switch (operation) {
            case '1':
              await this.sendMessage(from,
                `üìä *Establecer Stock Exacto*\n\n` +
                `üì¶ Producto: *${productData.name}*\n` +
                `üìä Stock actual: ${productData.stock} unidades\n\n` +
                `Env√≠a la cantidad exacta de stock que deseas establecer:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
                ...conversationData,
                admin_step: 'set_exact',
                operation_type: 'set'
              })
              break

            case '2':
              await this.sendMessage(from,
                `‚ûï *Agregar Stock*\n\n` +
                `üì¶ Producto: *${productData.name}*\n` +
                `üìä Stock actual: ${productData.stock} unidades\n\n` +
                `Env√≠a la cantidad que deseas AGREGAR al stock actual:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
                ...conversationData,
                admin_step: 'add_stock',
                operation_type: 'add'
              })
              break

            case '3':
              await this.sendMessage(from,
                `‚ûñ *Reducir Stock*\n\n` +
                `üì¶ Producto: *${productData.name}*\n` +
                `üìä Stock actual: ${productData.stock} unidades\n\n` +
                `Env√≠a la cantidad que deseas REDUCIR del stock actual:`
              )
              this.setConversationState(from, this.STATES.ADMIN_UPDATE_STOCK, {
                ...conversationData,
                admin_step: 'reduce_stock',
                operation_type: 'reduce'
              })
              break

            case '4':
              await this.sendMessage(from, `‚ùå *Operaci√≥n Cancelada*\n\nVolviendo al men√∫ principal...`)
              await this.showAdminMenu(from, await this.getCustomerName(from))
              this.setConversationState(from, this.STATES.ADMIN_MENU, {
                admin_session_id: conversationData.admin_session_id,
                admin_code: conversationData.admin_code
              })
              break

            default:
              await this.sendMessage(from,
                `‚ùå *Opci√≥n Inv√°lida*\n\n` +
                `Por favor, env√≠a un n√∫mero del 1 al 4:`
              )
          }
          break

        case 'set_exact':
          // Establecer stock exacto
          const exactStock = parseInt(messageText.trim())

          if (isNaN(exactStock) || exactStock < 0) {
            await this.sendMessage(from,
              `‚ùå *Cantidad Inv√°lida*\n\n` +
              `El stock debe ser un n√∫mero entero mayor o igual a 0.\n` +
              `Ejemplo: 50\n\n` +
              `Env√≠a una cantidad v√°lida:`
            )
            return
          }

          try {
            await this.inventory.updateProduct(productData.id, { stock: exactStock })
            await this.sendMessage(from,
              `‚úÖ *Stock Actualizado*\n\n` +
              `üì¶ Producto: *${productData.nombre}*\n` +
              `üìä Stock anterior: ${productData.stock} unidades\n` +
              `üìä Stock nuevo: *${exactStock} unidades*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error actualizando stock:', error)
            await this.sendMessage(from, `‚ùå Error actualizando el stock del producto.`)
          }
          break

        case 'add_stock':
          // Agregar stock
          const addAmount = parseInt(messageText.trim())

          if (isNaN(addAmount) || addAmount <= 0) {
            await this.sendMessage(from,
              `‚ùå *Cantidad Inv√°lida*\n\n` +
              `La cantidad a agregar debe ser un n√∫mero entero mayor a 0.\n` +
              `Ejemplo: 25\n\n` +
              `Env√≠a una cantidad v√°lida:`
            )
            return
          }

          try {
            const newStock = productData.stock + addAmount
            await this.inventory.updateProduct(productData.id, { stock: newStock })
            await this.sendMessage(from,
              `‚úÖ *Stock Agregado*\n\n` +
              `üì¶ Producto: *${productData.name}*\n` +
              `üìä Stock anterior: ${productData.stock} unidades\n` +
              `‚ûï Cantidad agregada: ${addAmount} unidades\n` +
              `üìä Stock nuevo: *${newStock} unidades*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error agregando stock:', error)
            await this.sendMessage(from, `‚ùå Error agregando stock al producto.`)
          }
          break

        case 'reduce_stock':
          // Reducir stock
          const reduceAmount = parseInt(messageText.trim())

          if (isNaN(reduceAmount) || reduceAmount <= 0) {
            await this.sendMessage(from,
              `‚ùå *Cantidad Inv√°lida*\n\n` +
              `La cantidad a reducir debe ser un n√∫mero entero mayor a 0.\n` +
              `Ejemplo: 10\n\n` +
              `Env√≠a una cantidad v√°lida:`
            )
            return
          }

          if (reduceAmount > productData.stock) {
            await this.sendMessage(from,
              `‚ùå *Cantidad Excesiva*\n\n` +
              `No puedes reducir ${reduceAmount} unidades.\n` +
              `Stock actual: ${productData.stock} unidades\n` +
              `M√°ximo a reducir: ${productData.stock} unidades\n\n` +
              `Env√≠a una cantidad v√°lida:`
            )
            return
          }

          try {
            const newStock = productData.stock - reduceAmount
            await this.inventory.updateProduct(productData.id, { stock: newStock })
            await this.sendMessage(from,
              `‚úÖ *Stock Reducido*\n\n` +
              `üì¶ Producto: *${productData.name}*\n` +
              `üìä Stock anterior: ${productData.stock} unidades\n` +
              `‚ûñ Cantidad reducida: ${reduceAmount} unidades\n` +
              `üìä Stock nuevo: *${newStock} unidades*\n\n` +
              `¬°Actualizaci√≥n completada exitosamente!`
            )

            // Volver al men√∫
            await this.showAdminMenu(from, await this.getCustomerName(from))
            this.setConversationState(from, this.STATES.ADMIN_MENU, {
              admin_session_id: conversationData.admin_session_id,
              admin_code: conversationData.admin_code
            })
          } catch (error) {
            console.error('Error reduciendo stock:', error)
            await this.sendMessage(from, `‚ùå Error reduciendo stock del producto.`)
          }
          break

        default:
          await this.sendMessage(from, `‚ùå Estado no v√°lido. Volviendo al men√∫ principal...`)
          await this.showAdminMenu(from, await this.getCustomerName(from))
          this.setConversationState(from, this.STATES.ADMIN_MENU, {
            admin_session_id: conversationData.admin_session_id,
            admin_code: conversationData.admin_code
          })
      }

    } catch (error) {
      console.error('Error en handleAdminUpdateStock:', error)
      await this.sendMessage(from, '‚ùå Error procesando actualizaci√≥n de stock.')
      await this.showAdminMenu(from, await this.getCustomerName(from))
      this.setConversationState(from, this.STATES.ADMIN_MENU, {
        admin_session_id: conversationData.admin_session_id,
        admin_code: conversationData.admin_code
      })
    }
  }

  // Sugerir categor√≠as para explorar m√°s productos
  async sugerirCategorias(from, customerName) {
    try {
      const categorias = await this.inventory.getCategories()

      if (categorias.length > 0) {
        const categoriasTexto = categorias.join(', ')
        const sugerenciaMessage = `¬øTe interesa alg√∫n producto diferente? ü§î

Entre nuestras categor√≠as tenemos: ${categoriasTexto}.

Solo dime algo como "mu√©strame deportes" o "qu√© tienes en electr√≥nica" y te mostrar√© los productos m√°s populares de esa categor√≠a. üòä`

        await this.sendMessage(from, sugerenciaMessage)
        this.addToHistory(from, 'assistant', sugerenciaMessage)
      } else {
        const closingMessage = `¬øTe interesa alguno de estos productos? ¬°Dime cu√°l te llama la atenci√≥n! üõçÔ∏è`
        await this.sendMessage(from, closingMessage)
        this.addToHistory(from, 'assistant', closingMessage)
      }
    } catch (error) {
      console.error('Error sugiriendo categor√≠as:', error)
      const closingMessage = `¬øTe interesa alguno de estos productos? ¬°Dime cu√°l te llama la atenci√≥n! üõçÔ∏è`
      await this.sendMessage(from, closingMessage)
      this.addToHistory(from, 'assistant', closingMessage)
    }
  }

  // Manejar solicitudes de categor√≠as espec√≠ficas
  async handleCategoryRequest(from, messageText, customerName, categoria) {
    try {
      console.log(`üè∑Ô∏è Cliente solicita categor√≠a: ${categoria}`)

      // Obtener productos de la categor√≠a
      const productosCategoria = await this.inventory.getProductsByCategory(categoria)

      if (productosCategoria.length === 0) {
        const noProductsMessage = `Lo siento, actualmente no tenemos productos disponibles en la categor√≠a "${categoria}". üòî

¬øTe gustar√≠a ver nuestros productos destacados o explorar otra categor√≠a?`

        await this.sendMessage(from, noProductsMessage)
        this.addToHistory(from, 'assistant', noProductsMessage)
        return
      }

      // Obtener productos m√°s vendidos de esta categor√≠a (si hay datos de ventas)
      let productosMostrar = productosCategoria

      if (this.sales) {
        try {
          const productosMasVendidos = await this.sales.getProductosMasVendidos(categoria, 5)

          if (productosMasVendidos.length > 0) {
            // Filtrar productos que existen en inventario y ordenar por ventas
            const productosConVentas = []

            for (const vendido of productosMasVendidos) {
              const producto = productosCategoria.find(p => p.id === vendido.producto_id)
              if (producto) {
                productosConVentas.push({
                  ...producto,
                  total_vendido: vendido.total_vendido,
                  total_ingresos: vendido.total_ingresos
                })
              }
            }

            // Agregar productos restantes que no est√°n en el ranking
            const productosRestantes = productosCategoria.filter(p =>
              !productosConVentas.find(pv => pv.id === p.id)
            )

            productosMostrar = [...productosConVentas, ...productosRestantes].slice(0, 5)
          }
        } catch (error) {
          console.error('Error obteniendo productos m√°s vendidos:', error)
          // Usar productos normales si falla
          productosMostrar = productosCategoria.slice(0, 5)
        }
      } else {
        productosMostrar = productosCategoria.slice(0, 5)
      }

      // Enviar mensaje introductorio
      const introMessage = `üè∑Ô∏è Aqu√≠ tienes nuestros productos de ${categoria}${this.sales ? ' (ordenados por popularidad)' : ''}:`
      await this.sendMessage(from, introMessage)
      this.addToHistory(from, 'assistant', introMessage)

      // Enviar productos con im√°genes
      for (const product of productosMostrar) {
        let descripcionExtra = ''
        if (product.total_vendido) {
          descripcionExtra = `\nüî• ¬°${product.total_vendido} vendidos! Muy popular`
        }

        await this.sendProductWithImage(from, product, descripcionExtra)
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      // Mensaje de cierre
      const closingMessage = `¬øTe interesa alguno de estos productos de ${categoria}? ¬°Dime cu√°l te llama la atenci√≥n! üòä

Tambi√©n puedes preguntarme por otra categor√≠a si quieres explorar m√°s opciones. üõçÔ∏è`

      await this.sendMessage(from, closingMessage)
      this.addToHistory(from, 'assistant', closingMessage)

    } catch (error) {
      console.error('Error manejando solicitud de categor√≠a:', error)

      const errorMessage = `Disculpa, tuve un problema buscando productos de ${categoria}. ¬øPodr√≠as intentar de nuevo o preguntarme por otra categor√≠a? üòä`
      await this.sendMessage(from, errorMessage)
      this.addToHistory(from, 'assistant', errorMessage)
    }
  }

  async handleAskSpecification(from, messageText, intent, products, customerName, recentHistory) {
    let response;

    if (intent.products_mentioned.length > 0) {
      // Cliente mencion√≥ productos espec√≠ficos
      const mentionedProducts = intent.products_mentioned

      // üîç NUEVA L√ìGICA: Diferenciar entre buscar informaci√≥n vs querer comprar
      if (intent.intent === 'seeking_advice') {
        // Cliente busca informaci√≥n/consejo sobre el producto
        if (mentionedProducts.length === 1) {
          const productId = mentionedProducts[0].id
          const product = products.find(p => p.id === productId)

          if (product) {
            // Enviar imagen del producto
            await this.sendProductWithImage(from, product, '')

            // Generar respuesta informativa (no de venta)
            response = await this.gemini.generateSalesResponse(
              `Cliente pregunta sobre ${product.nombre}: "${messageText}". Responde informativamente sobre caracter√≠sticas, beneficios y utilidad del producto. NO preguntes cantidad ni asumas que quiere comprar.`,
              customerName,
              products,
              this.STATES.INTERESTED,
              recentHistory
            )
          } else {
            // Fallback si no se encuentra el producto
            response = await this.gemini.generateSalesResponse(
              `Cliente busca informaci√≥n sobre: ${mentionedProducts.map(p => p.name).join(', ')}. Mensaje: "${messageText}". Responde informativamente.`,
              customerName,
              products,
              this.STATES.INTERESTED,
              recentHistory
            )
          }
        } else {
          // M√∫ltiples productos mencionados para informaci√≥n
          response = await this.gemini.generateSalesResponse(
            `Cliente busca informaci√≥n sobre m√∫ltiples productos: ${mentionedProducts.map(p => p.name).join(', ')}. Mensaje: "${messageText}". Responde informativamente.`,
            customerName,
            products,
            this.STATES.INTERESTED,
            recentHistory
          )
        }

        await this.sendMessage(from, response)

      } else {
        // Cliente quiere especificar para comprar (l√≥gica original)
        if (mentionedProducts.length === 1) {
          // Un solo producto mencionado - mostrar con imagen y preguntar cantidad
          const productId = mentionedProducts[0].id
          const product = products.find(p => p.id === productId)

          if (product) {
            const askQuantityText = `¬°Excelente elecci√≥n! üòä ¬øCu√°ntas unidades de ${product.nombre} te gustar√≠a?`
            await this.sendProductWithImage(from, product, askQuantityText)
            response = askQuantityText // Para el historial
          } else {
            // Fallback si no se encuentra el producto
            response = await this.gemini.generateSalesResponse(
              `Cliente interesado en: ${mentionedProducts.map(p => p.name).join(', ')}. Pregunta cantidad.`,
              customerName,
              products,
              this.STATES.INTERESTED,
              recentHistory
            )
            await this.sendMessage(from, response)
          }
        } else {
          // M√∫ltiples productos mencionados - usar respuesta tradicional
          response = await this.gemini.generateSalesResponse(
            `Cliente interesado en: ${mentionedProducts.map(p => p.name).join(', ')}. Pregunta cantidad.`,
            customerName,
            products,
            this.STATES.INTERESTED,
            recentHistory
          )
          await this.sendMessage(from, response)
        }
      }
    } else {
      // Respuesta vaga, pedir especificaci√≥n
      response = await this.gemini.generateSalesResponse(
        `Cliente dijo "${messageText}" pero no especific√≥ producto. Pide que sea m√°s espec√≠fico.`,
        customerName,
        products,
        this.STATES.BROWSING,
        recentHistory
      )
      await this.sendMessage(from, response)
    }
    this.addToHistory(from, 'assistant', response)
  }

  async handleAskQuantity(from, intent, conversationData, customerName, recentHistory) {
    const products = await this.inventory.getAllProducts()
    const response = await this.gemini.generateSalesResponse(
      `Cliente especific√≥ productos: ${intent.products_mentioned.map(p => p.name).join(', ')}. Pregunta cantidad espec√≠fica.`,
      customerName,
      products,
      this.STATES.SPECIFYING,
      recentHistory
    )
    await this.sendMessage(from, response)
    this.addToHistory(from, 'assistant', response)
  }

  async handleAskConfirmation(from, intent, conversationData, customerName, overrideProducts = null) {
    const selectedProducts = overrideProducts || intent.products_mentioned
    const quantity = intent.quantity_mentioned || conversationData.quantity || 1

    if (selectedProducts.length > 0) {
      // Buscar productos en inventario para obtener precios exactos
      const products = await this.inventory.getAllProducts()
      const productDetails = selectedProducts.map(sp => {
        const product = products.find(p => p.id === sp.id || p.nombre.toLowerCase().includes(sp.name.toLowerCase()))
        return product ? {
          id: product.id,
          nombre: product.nombre,
          precio: product.precio,
          categoria: product.categoria,
          cantidad: quantity
        } : null
      }).filter(Boolean)

      if (productDetails.length > 0) {
        const total = productDetails.reduce((sum, p) => sum + (p.precio * p.cantidad), 0)

        const confirmationMessage = `¬øConfirmas tu pedido? üìã

${productDetails.map(p => `üì¶ ${p.cantidad}x ${p.nombre} - S/ ${p.precio} c/u`).join('\n')}

üíµ Total: S/ ${total.toFixed(2)}

Responde "S√ç CONFIRMO" para procesar tu pedido o "NO" para cancelar.`

        await this.sendMessage(from, confirmationMessage)
        this.addToHistory(from, 'assistant', confirmationMessage)
      }
    }
  }

  async handleProcessOrder(from, conversationData, customerName) {
    try {
      console.log(`üîç DEBUG handleProcessOrder - conversationData:`, JSON.stringify(conversationData, null, 2))
      const pendingOrder = conversationData.pending_order
      console.log(`üîç DEBUG pendingOrder:`, JSON.stringify(pendingOrder, null, 2))

      if (pendingOrder && pendingOrder.products && pendingOrder.products.length > 0) {
        // Verificar si ya se proces√≥ este pedido (prevenir duplicados)
        if (conversationData.order_processed) {
          await this.sendMessage(from, 'Tu pedido ya fue procesado anteriormente. ¬øEn qu√© m√°s puedo ayudarte? üòä')
          return
        }

        // Crear pedido real
        const products = await this.inventory.getAllProducts()
        const orderProducts = pendingOrder.products.map(sp => {
          const product = products.find(p => p.id === sp.id || p.nombre.toLowerCase().includes(sp.name.toLowerCase()))
          return product ? {
            id: product.id,
            nombre: product.nombre,
            precio: product.precio,
            categoria: product.categoria,
            cantidad: pendingOrder.quantity || 1
          } : null
        }).filter(Boolean)

        if (orderProducts.length > 0) {
          const total = orderProducts.reduce((sum, p) => sum + (p.precio * p.cantidad), 0)

          const orderData = {
            cliente_whatsapp: from,
            cliente_nombre: customerName,
            productos: orderProducts,
            total: total,
            notas: `Pedido confirmado expl√≠citamente por WhatsApp`
          }

          const newOrder = await this.orders.createOrder(orderData)
          console.log(`‚úÖ Pedido creado: ${newOrder.id} para ${from}`)

          // Marcar como procesado para evitar duplicados
          this.setConversationState(from, this.STATES.PAYMENT, {
            ...conversationData,
            order_processed: true,
            order_id: newOrder.id
          })

          // Guardar pedido pendiente para proceso de imagen
          this.pendingOrders.set(from, {
            orderId: newOrder.id,
            total: total,
            customerName: customerName,
            productos: orderProducts
          })

          // Obtener configuraci√≥n de pago
          const config = await this.db.getAllConfig()

          // Generar mensaje de confirmaci√≥n con datos de pago
          const confirmationMessage = await this.gemini.generateOrderConfirmation(
            orderProducts,
            total,
            customerName,
            config.yape_number,
            config.yape_account_holder,
            newOrder.id
          )

          await this.sendMessage(from, confirmationMessage)
          this.addToHistory(from, 'assistant', confirmationMessage)

          // NO limpiar estado aqu√≠ - mantener para el proceso de pago
        } else {
          console.log(`‚ö†Ô∏è DEBUG: No se encontraron productos v√°lidos en pending_order`)
          await this.sendMessage(from, 'Hubo un problema con tu pedido. ¬øPodr√≠as especificar nuevamente qu√© producto deseas? ü§ñ')
        }
      } else {
        console.log(`‚ö†Ô∏è DEBUG: No hay pending_order v√°lido. conversationData:`, JSON.stringify(conversationData, null, 2))
        await this.sendMessage(from, 'No encontr√© un pedido pendiente. ¬øQu√© producto te interesa? ü§ñ')
      }
    } catch (error) {
      console.error('Error procesando pedido:', error)
      await this.sendMessage(from, 'Hubo un problema procesando tu pedido. Por favor, intenta nuevamente. ü§ñ')
      // No limpiar estado en caso de error para permitir reintento
    }
  }

  async handleAskClarification(from, messageText, customerName, recentHistory) {
    const products = await this.inventory.getAllProducts()
    const response = await this.gemini.generateSalesResponse(
      `Cliente dijo "${messageText}" pero no es una confirmaci√≥n clara. Pide confirmaci√≥n expl√≠cita.`,
      customerName,
      products,
      this.STATES.CONFIRMING,
      recentHistory
    )
    await this.sendMessage(from, response)
    this.addToHistory(from, 'assistant', response)
  }

  // üö´ NUEVO M√âTODO: Manejar cancelaci√≥n de pedido
  async handleOrderCancellation(from, customerName) {
    try {
      console.log(`üö´ Procesando cancelaci√≥n de pedido para: ${customerName}`)

      const response = await this.gemini.generateSalesResponse(
        `SITUACI√ìN: El cliente ${customerName} acaba de cancelar su pedido diciendo "No".

        INSTRUCCIONES ESPEC√çFICAS:
        - Responde de manera comprensiva y amigable
        - Reconoce que entiende que quiere cancelar el pedido
        - Ofrece ayuda para encontrar otros productos que puedan interesarle
        - Pregunta si hay algo m√°s en lo que puedas ayudar
        - Mant√©n un tono positivo y servicial
        - NO insistas en el producto cancelado

        EJEMPLO DE RESPUESTA ESPERADA:
        "Entiendo ${customerName} que quieres cancelar el pedido. No hay problema üòä

        Quiz√°s te pueda interesar otro tipo de producto. Si es as√≠, h√°zmelo saber... ¬°estar√© encantada de atenderte! üåü

        ¬øHay algo m√°s en lo que te pueda ayudar hoy?"`,
        customerName,
        await this.inventory.getAllProducts(),
        this.STATES.BROWSING,
        this.getRecentHistory(from)
      )

      await this.sendMessage(from, response)
      this.addToHistory(from, 'assistant', response)

    } catch (error) {
      console.error('Error manejando cancelaci√≥n:', error)

      // Mensaje de fallback mejorado
      await this.sendMessage(from,
        `Entiendo ${customerName} que quieres cancelar el pedido. No hay problema üòä\n\n` +
        `Quiz√°s te pueda interesar otro tipo de producto. Si es as√≠, h√°zmelo saber... ¬°estar√© encantada de atenderte! üåü\n\n` +
        `¬øHay algo m√°s en lo que te pueda ayudar hoy?`
      )
      this.addToHistory(from, 'assistant', 'Pedido cancelado - mensaje de fallback')
    }
  }

  async handleFarewell(from, customerName) {
    // Obtener el nombre del negocio desde la configuraci√≥n
    const businessName = await this.getBusinessName()

    const farewellMessage = `¬°Eres bienvenido siempre en ${businessName}! üè™‚ú® Las veces que quieras comprar algo estar√© dispuesta a atenderte de inmediato. ¬°Vuelve pronto ${customerName}, que tengas un bonito d√≠a! üòäüåü`

    await this.sendMessage(from, farewellMessage)
    this.addToHistory(from, 'assistant', farewellMessage)
  }

  async handleReturningCustomerGreeting(from, customerName, products) {
    // Obtener productos destacados para cliente recurrente
    const productosDestacados = await this.inventory.getDestacados()

    // Obtener el nombre del negocio desde la configuraci√≥n
    const businessName = await this.getBusinessName()

    const greetingMessage = `¬°Hola de nuevo ${customerName}! üòä ¬°Qu√© bueno verte de nuevo en ${businessName}! üåü\n\nVeo que ya tienes experiencia comprando con nosotros. ¬øEn qu√© puedo ayudarte hoy?`

    await this.sendMessage(from, greetingMessage)
    this.addToHistory(from, 'assistant', greetingMessage)

    // Mostrar productos destacados despu√©s de un breve delay
    if (productosDestacados.length > 0) {
      await new Promise(resolve => setTimeout(resolve, 2000))
      await this.sendTyping(from)

      const productMessage = `Aqu√≠ tienes nuestros productos m√°s populares:\n\n${productosDestacados.map(p =>
        `${p.destacado ? '‚≠ê ' : ''}*${p.nombre}* - S/ ${p.precio}\nüì± ${p.categoria}`
      ).join('\n\n')}\n\n¬øTe interesa alguno de estos o prefieres que te muestre algo espec√≠fico? üõçÔ∏è`

      await this.sendMessage(from, productMessage)
      this.addToHistory(from, 'assistant', productMessage)
    }
  }

  async handleGeneralResponse(from, messageText, customerName, products, currentState, recentHistory) {
    const response = await this.gemini.generateSalesResponse(
      messageText,
      customerName,
      products,
      currentState,
      recentHistory
    )
    await this.sendMessage(from, response)
    this.addToHistory(from, 'assistant', response)
  }

  async handleImageMessage(message, from) {
    try {
      // Verificar si hay un pedido pendiente para este cliente
      const pendingOrder = this.pendingOrders.get(from)
      if (!pendingOrder) {
        await this.sendMessage(from,
          'He recibido tu imagen, pero no tienes pedidos pendientes de pago. ¬øEn qu√© puedo ayudarte? üòä')
        return
      }

      // Descargar imagen
      console.log('üì∑ Descargando imagen de captura de pago...')
      const buffer = await this.downloadMediaMessage(message.message.imageMessage)
      const base64Image = buffer.toString('base64')

      console.log('üîç Enviando imagen a Gemini Vision para validaci√≥n...')

      // Obtener configuraci√≥n del titular de cuenta Yape
      const config = await this.orders.db.getAllConfig()
      const accountHolder = config.yape_account_holder || 'Titular no configurado'
      const yapeNumber = config.yape_number || null

      // Validar pago con Gemini Vision
      const validation = await this.gemini.validateYapePayment(
        base64Image,
        pendingOrder.total,
        pendingOrder.customerName,
        accountHolder,
        yapeNumber
      )

      console.log('‚úÖ Validaci√≥n de Gemini completada:', validation)

      // Post-procesamiento: Validaci√≥n adicional con l√≥gica mejorada
      const enhancedValidation = await this.enhancePaymentValidation(validation, accountHolder, yapeNumber)
      console.log('üîç Validaci√≥n mejorada:', enhancedValidation)

      if (enhancedValidation.valido && (enhancedValidation.confianza === 'alta' || enhancedValidation.confianza === 'media')) {
        if (enhancedValidation.monto_correcto) {
          // Pago exacto - procesar pedido completo
          await this.processValidPayment(from, pendingOrder, enhancedValidation)
        } else if (enhancedValidation.es_pago_parcial) {
          // Pago parcial - solicitar monto restante
          await this.processPartialPayment(from, pendingOrder, enhancedValidation)
        } else if (enhancedValidation.es_pago_excesivo) {
          // Pago excesivo - notificar diferencia
          await this.processExcessivePayment(from, pendingOrder, enhancedValidation)
        } else {
          // Monto incorrecto por otra raz√≥n
          await this.sendMessage(from,
            `‚ùå El monto no coincide. ${enhancedValidation.razon}\n\nPor favor, verifica el monto y env√≠a una nueva captura. üòä`)
        }
      } else {
        // Pago inv√°lido
        await this.sendMessage(from,
          `‚ùå No pude validar tu pago. ${enhancedValidation.razon}\n\nPor favor, env√≠a una captura clara del pago por Yape. Si necesitas ayuda, escr√≠beme "ayuda". üòä`)
      }

    } catch (error) {
      console.error('Error procesando imagen:', error)
      await this.sendMessage(from,
        'Hubo un problema procesando tu imagen. ¬øPodr√≠as enviarla de nuevo? üì∑')
    }
  }

  async processPartialPayment(from, pendingOrder, validation) {
    try {
      // Obtener datos de pago acumulado del estado de conversaci√≥n
      const conversationData = this.getConversationData(from)
      const paymentData = conversationData.payment_data || {
        total_esperado: pendingOrder.total,
        total_recibido: 0,
        pagos_recibidos: []
      }

      // Extraer monto num√©rico del string "S/ XX"
      const montoRecibido = parseFloat(validation.monto_detectado.replace('S/', '').trim())

      // DEBUG: Logs para diagnosticar el problema
      console.log('üîç DEBUG processPartialPayment - Datos iniciales:')
      console.log('  - validation.monto_detectado:', validation.monto_detectado)
      console.log('  - montoRecibido parseado:', montoRecibido)
      console.log('  - pendingOrder.total:', pendingOrder.total)
      console.log('  - paymentData antes:', JSON.stringify(paymentData, null, 2))

      // Agregar este pago al historial
      paymentData.pagos_recibidos.push({
        monto: montoRecibido,
        fecha: validation.fecha_pago,
        operacion: validation.numero_operacion,
        ultimos_digitos: validation.ultimos_digitos
      })

      // Actualizar total recibido
      paymentData.total_recibido += montoRecibido
      paymentData.faltante = paymentData.total_esperado - paymentData.total_recibido

      // DEBUG: Logs despu√©s de los c√°lculos
      console.log('üîç DEBUG processPartialPayment - Despu√©s de c√°lculos:')
      console.log('  - paymentData.total_esperado:', paymentData.total_esperado)
      console.log('  - paymentData.total_recibido:', paymentData.total_recibido)
      console.log('  - paymentData.faltante:', paymentData.faltante)
      console.log('  - Condici√≥n (faltante <= 0):', paymentData.faltante <= 0)

      // Actualizar estado de conversaci√≥n con datos de pago
      this.setConversationState(from, this.STATES.PAYMENT, {
        ...conversationData,
        payment_data: paymentData
      })

      if (paymentData.faltante <= 0) {
        // Pago completado con este pago parcial
        await this.processValidPayment(from, pendingOrder, validation)
      } else {
        // A√∫n falta dinero - solicitar el resto
        const mensaje = `¬°Gracias! Recib√≠ tu pago de ${validation.monto_detectado} para tu pedido de ${pendingOrder.productos.map(p => p.nombre).join(', ')}.

üí∞ **Total del pedido**: S/ ${paymentData.total_esperado}
‚úÖ **Total recibido**: S/ ${paymentData.total_recibido}
‚è≥ **Falta**: S/ ${paymentData.faltante}

Por favor env√≠a el pago del monto restante (S/ ${paymentData.faltante}) para completar tu pedido. üòä

üì± N√∫mero Yape: ${await this.getYapeNumber()}
üë§ Titular: ${await this.getYapeAccountHolder()}`

        await this.sendMessage(from, mensaje)
        this.addToHistory(from, 'assistant', mensaje)
      }

    } catch (error) {
      console.error('Error procesando pago parcial:', error)
      await this.sendMessage(from, 'Hubo un problema procesando tu pago parcial. ¬øPodr√≠as intentar de nuevo? üòä')
    }
  }

  async processExcessivePayment(from, pendingOrder, validation) {
    try {
      const diferencia = validation.diferencia_monto
      const mensaje = `¬°Gracias por tu pago de ${validation.monto_detectado}!

üí∞ **Total del pedido**: S/ ${pendingOrder.total}
‚úÖ **Recibido**: ${validation.monto_detectado}
üí∏ **Diferencia**: S/ ${diferencia} de m√°s

Tu pedido est√° confirmado. La diferencia de S/ ${diferencia} ser√° considerada como propina o puedes solicitar la devoluci√≥n. üòä`

      await this.sendMessage(from, mensaje)
      this.addToHistory(from, 'assistant', mensaje)

      // Procesar como pago v√°lido
      await this.processValidPayment(from, pendingOrder, validation)

    } catch (error) {
      console.error('Error procesando pago excesivo:', error)
      await this.sendMessage(from, 'Hubo un problema procesando tu pago. ¬øPodr√≠as intentar de nuevo? üòä')
    }
  }

  async getYapeNumber() {
    try {
      const config = await this.db.getAllConfig()
      return config.yape_number || 'No configurado'
    } catch (error) {
      return 'No disponible'
    }
  }

  async getYapeAccountHolder() {
    try {
      const config = await this.db.getAllConfig()
      return config.yape_account_holder || 'No configurado'
    } catch (error) {
      return 'No disponible'
    }
  }

  // Funci√≥n para validar nombres considerando el formato limitado de Yape
  validateYapeName(detectedName, configuredName) {
    if (!detectedName || !configuredName) {
      return { isValid: false, reason: 'Nombre detectado o configurado faltante' }
    }

    // Normalizar nombres (quitar acentos, convertir a min√∫sculas)
    const normalize = (str) => str.toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z\s]/g, '')
      .trim()

    const detectedNormalized = normalize(detectedName)
    const configuredNormalized = normalize(configuredName)

    // Si son exactamente iguales, es v√°lido
    if (detectedNormalized === configuredNormalized) {
      return { isValid: true, reason: 'Nombres coinciden exactamente' }
    }

      // Dividir nombres en partes
    const detectedParts = detectedNormalized.split(/\s+/).filter(part => part.length > 0)
    const configuredParts = configuredNormalized.split(/\s+/).filter(part => part.length > 0)

    if (detectedParts.length < 1 || configuredParts.length < 1) {
      return { isValid: false, reason: 'Formato de nombre insuficiente para validaci√≥n' }
    }

    // Caso especial: solo un nombre detectado (ej: "Ana")
    if (detectedParts.length === 1) {
      const detectedFirstName = detectedParts[0]
      const configuredFirstName = configuredParts[0]

      if (detectedFirstName === configuredFirstName) {
        return {
          isValid: true,
          reason: `Primer nombre "${configuredFirstName}" coincide (formato Yape simplificado)`
        }
      } else {
        return {
          isValid: false,
          reason: `Primer nombre no coincide. Detectado: "${detectedFirstName}", Esperado: "${configuredFirstName}"`
        }
      }
    }

    if (configuredParts.length < 2) {
      return { isValid: false, reason: 'Nombre configurado debe tener al menos nombre y apellido' }
    }

    // Extraer componentes del nombre configurado
    const [primerNombre, segundoNombre, primerApellido, segundoApellido] = configuredParts

    // Extraer componentes del nombre detectado (formato Yape)
    const detectedFirstName = detectedParts[0]
    let detectedFirstSurname = null
    let detectedSecondNameInitial = null
    let detectedSecondSurnameInitial = null

    // Buscar iniciales y apellidos en el nombre detectado
    for (let i = 1; i < detectedParts.length; i++) {
      const part = detectedParts[i]

      if (part.length === 1) {
        // Es una inicial
        if (!detectedSecondNameInitial && segundoNombre && part === segundoNombre.charAt(0)) {
          detectedSecondNameInitial = part
        } else if (!detectedSecondSurnameInitial && segundoApellido && part === segundoApellido.charAt(0)) {
          detectedSecondSurnameInitial = part
        }
      } else {
        // Es un nombre/apellido completo - tomar el primer apellido completo encontrado
        if (!detectedFirstSurname) {
          detectedFirstSurname = part
        }
      }
    }

    // Validar componentes cr√≠ticos (primer nombre y primer apellido)
    const firstNameMatches = detectedFirstName === primerNombre
    const firstSurnameMatches = detectedFirstSurname === primerApellido

    if (firstNameMatches && firstSurnameMatches) {
      return {
        isValid: true,
        reason: `Primer nombre "${primerNombre}" y primer apellido "${primerApellido}" coinciden (formato Yape)`
      }
    }

    // Si solo coincide el primer nombre pero hay apellidos detectados que no coinciden, es inv√°lido
    if (firstNameMatches && detectedFirstSurname && !firstSurnameMatches) {
      return {
        isValid: false,
        reason: `Primer nombre coincide pero apellido no. Detectado: "${detectedFirstSurname}", Esperado: "${primerApellido}"`
      }
    }

    // Si solo coincide el primer nombre y no hay apellido visible, es parcialmente v√°lido
    if (firstNameMatches && !detectedFirstSurname) {
      return {
        isValid: true,
        reason: `Primer nombre "${primerNombre}" coincide, apellido no visible en formato Yape`
      }
    }

    return {
      isValid: false,
      reason: `Primer nombre o apellido no coinciden. Detectado: "${detectedName}", Configurado: "${configuredName}"`
    }
  }

  // Funci√≥n para mejorar la validaci√≥n de pagos con l√≥gica adicional
  async enhancePaymentValidation(geminiValidation, configuredAccountHolder, configuredYapeNumber) {
    try {
      // Crear copia de la validaci√≥n original
      const enhanced = { ...geminiValidation }

      // Validar nombre con l√≥gica mejorada
      if (geminiValidation.titular_detectado && configuredAccountHolder) {
        const nameValidation = this.validateYapeName(
          geminiValidation.titular_detectado,
          configuredAccountHolder
        )

        // Actualizar titular_correcto basado en nuestra l√≥gica mejorada
        enhanced.titular_correcto = nameValidation.isValid

        // Agregar informaci√≥n adicional a la raz√≥n
        if (nameValidation.isValid && !geminiValidation.titular_correcto) {
          enhanced.razon = `${geminiValidation.razon} | ‚úÖ Validaci√≥n mejorada de nombre: ${nameValidation.reason}`
        } else if (!nameValidation.isValid && geminiValidation.titular_correcto) {
          enhanced.razon = `${geminiValidation.razon} | ‚ö†Ô∏è Validaci√≥n mejorada de nombre: ${nameValidation.reason}`
        }
      }

      // Validar √∫ltimos 3 d√≠gitos con l√≥gica mejorada
      if (configuredYapeNumber && geminiValidation.ultimos_digitos) {
        const expectedLastDigits = configuredYapeNumber.slice(-3)
        const detectedLastDigits = geminiValidation.ultimos_digitos

        const digitsMatch = expectedLastDigits === detectedLastDigits
        enhanced.ultimos_digitos_correctos = digitsMatch

        // Agregar informaci√≥n sobre los d√≠gitos a la raz√≥n
        if (!digitsMatch) {
          const digitInfo = `‚ö†Ô∏è √öltimos 3 d√≠gitos no coinciden: esperado "${expectedLastDigits}", detectado "${detectedLastDigits}"`
          enhanced.razon = enhanced.razon ? `${enhanced.razon} | ${digitInfo}` : digitInfo

          // Si los d√≠gitos no coinciden, marcar como inv√°lido
          enhanced.valido = false
          enhanced.confianza = 'baja'
        } else {
          const digitInfo = `‚úÖ √öltimos 3 d√≠gitos coinciden: ${expectedLastDigits}`
          enhanced.razon = enhanced.razon ? `${enhanced.razon} | ${digitInfo}` : digitInfo
        }
      }

      // Validaci√≥n final: debe tener nombre correcto Y d√≠gitos correctos para ser completamente v√°lido
      if (enhanced.valido) {
        const nameOk = enhanced.titular_correcto
        const digitsOk = enhanced.ultimos_digitos_correctos !== false // true o undefined (si no se valid√≥)

        if (!nameOk || !digitsOk) {
          enhanced.valido = false
          enhanced.confianza = 'baja'

          const issues = []
          if (!nameOk) issues.push('titular no coincide')
          if (!digitsOk) issues.push('√∫ltimos 3 d√≠gitos no coinciden')

          enhanced.razon = `${enhanced.razon} | ‚ùå Validaci√≥n fallida: ${issues.join(', ')}`
        }
      }

      return enhanced

    } catch (error) {
      console.error('Error en validaci√≥n mejorada:', error)
      // En caso de error, devolver la validaci√≥n original
      return geminiValidation
    }
  }

  async createPendingOrder(from, orderData, customerName) {
    try {
      // Validar stock
      const stockErrors = await this.orders.validateOrderStock(orderData.productos, this.inventory)

      if (stockErrors.length > 0) {
        await this.sendMessage(from,
          `‚ùå Lo siento, hay problemas con el stock:\n\n${stockErrors.join('\n')}\n\n¬øTe gustar√≠a modificar tu pedido? üòä`)
        return
      }

      // Crear pedido en base de datos
      const order = await this.orders.createOrder({
        cliente_whatsapp: from,
        cliente_nombre: customerName,
        productos: orderData.productos,
        total: orderData.total,
        notas: 'Pedido creado desde WhatsApp'
      })

      // Guardar pedido pendiente en memoria
      this.pendingOrders.set(from, {
        orderId: order.id,
        total: orderData.total,
        customerName: customerName,
        productos: orderData.productos
      })

      // Obtener configuraci√≥n de pago
      const config = await this.orders.db.getAllConfig()
      const yapeNumber = config.yape_number || '987654321'
      const accountHolder = config.yape_account_holder || 'Titular no configurado'

      // Generar mensaje de confirmaci√≥n
      const confirmationMessage = await this.gemini.generateOrderConfirmation(
        orderData.productos,
        orderData.total,
        customerName,
        yapeNumber,
        accountHolder
      )

      await this.sendMessage(from, confirmationMessage)

      // Notificar al dashboard
      this.io.emit('orders-updated')

    } catch (error) {
      console.error('Error creando pedido pendiente:', error)
      await this.sendMessage(from,
        'Hubo un problema procesando tu pedido. ¬øPodr√≠as intentar de nuevo? üòä')
    }
  }

  async processValidPayment(from, pendingOrder, validation) {
    try {
      // Guardar informaci√≥n del comprobante Yape
      await this.orders.db.updateYapePaymentInfo(pendingOrder.orderId, {
        numero_operacion: validation.numero_operacion,
        fecha_pago: validation.fecha_pago,
        ultimos_digitos: validation.ultimos_digitos,
        titular_detectado: validation.titular_detectado
      })

      // Procesar pago y actualizar stock
      const updatedOrder = await this.orders.processOrderPayment(
        pendingOrder.orderId,
        this.inventory,
        this.googleDrive
      )

      // Remover de pedidos pendientes
      this.pendingOrders.delete(from)

      // RESETEAR ESTADO CONVERSACIONAL DESPU√âS DE PAGO COMPLETADO
      // Esto permite que el cliente inicie nuevas conversaciones/pedidos
      this.setConversationState(from, this.STATES.BROWSING, {
        last_completed_order: updatedOrder.id,
        order_completed_at: new Date().toISOString()
      })

      // Enviar confirmaci√≥n con informaci√≥n detallada
      await this.sendMessage(from,
        `‚úÖ ¬°Pago confirmado!\n\nTu pedido #${updatedOrder.id} ha sido procesado exitosamente.\nüí∞ Monto: ${validation.monto_detectado}\nüî¢ Operaci√≥n: ${validation.numero_operacion}\nüìÖ Fecha: ${validation.fecha_pago}\n\nTe notificaremos cuando est√© listo para env√≠o. ¬°Gracias por tu compra! üéâ`)

      // Notificar al dashboard
      this.io.emit('orders-updated')
      this.io.emit('inventory-updated')

    } catch (error) {
      console.error('Error procesando pago v√°lido:', error)
      await this.sendMessage(from,
        'Tu pago es v√°lido, pero hubo un problema procesando el pedido. Nos pondremos en contacto contigo pronto. üòä')
    }
  }

  async sendMessage(to, text) {
    if (!this.isConnected || !this.sock) {
      throw new Error('WhatsApp no est√° conectado')
    }

    try {
      // Aplicar configuraciones de tiempo de respuesta
      await this.applyResponseTiming(to)

      await this.sock.sendMessage(to, { text })
      console.log(`üì§ Mensaje enviado a ${to}`)
    } catch (error) {
      console.error('Error enviando mensaje:', error)
      throw error
    }
  }

  async sendImageMessage(to, imageUrl, caption = '') {
    if (!this.isConnected || !this.sock) {
      throw new Error('WhatsApp no est√° conectado')
    }

    try {
      // Aplicar configuraciones de tiempo de respuesta
      await this.applyResponseTiming(to)

      // Enviar imagen desde URL
      await this.sock.sendMessage(to, {
        image: { url: imageUrl },
        caption: caption
      })
      console.log(`üì∑ Imagen enviada a ${to} desde URL: ${imageUrl}`)
    } catch (error) {
      console.error('Error enviando imagen:', error)
      // Si falla el env√≠o de imagen, enviar solo el texto
      await this.sendMessage(to, caption || 'No pude enviar la imagen, pero aqu√≠ tienes la informaci√≥n del producto.')
    }
  }

  async sendProductWithImage(to, product, additionalText = '') {
    if (!this.isConnected || !this.sock) {
      throw new Error('WhatsApp no est√° conectado')
    }

    try {
      const productInfo = `üõçÔ∏è *${product.nombre}*\n\n` +
                         `üí∞ Precio: S/ ${product.precio}\n` +
                         `üì¶ Stock: ${product.stock} unidades\n` +
                         (product.descripcion ? `üìù ${product.descripcion}\n` : '') +
                         (product.categoria ? `üè∑Ô∏è Categor√≠a: ${product.categoria}\n` : '') +
                         (additionalText ? `\n${additionalText}` : '')

      // Si tiene imagen, enviarla con la informaci√≥n
      if (product.imagen_url && product.imagen_url.trim() !== '') {
        await this.sendImageMessage(to, product.imagen_url, productInfo)
      } else {
        // Si no tiene imagen, enviar solo el texto
        await this.sendMessage(to, productInfo)
      }
    } catch (error) {
      console.error('Error enviando producto con imagen:', error)
      // Fallback: enviar solo informaci√≥n de texto
      const fallbackText = `üõçÔ∏è *${product.nombre}*\n\n` +
                          `üí∞ Precio: S/ ${product.precio}\n` +
                          `üì¶ Stock: ${product.stock} unidades`
      await this.sendMessage(to, fallbackText)
    }
  }

  async sendTyping(to) {
    if (!this.isConnected || !this.sock) {
      console.warn('WhatsApp no est√° conectado, omitiendo indicador de escritura')
      return
    }

    try {
      const typingEnabled = await this.db.getConfig('response_typing_indicator_enabled')

      if (typingEnabled === 'true') {
        await this.sock.sendPresenceUpdate('composing', to)
        console.log(`‚úçÔ∏è Mostrando "escribiendo..." a ${to}`)
      }
    } catch (error) {
      console.error('Error enviando indicador de escritura:', error)
      // Continuar sin indicador si hay error
    }
  }

  async applyResponseTiming(to) {
    try {
      const delayEnabled = await this.db.getConfig('response_delay_enabled')
      const typingEnabled = await this.db.getConfig('response_typing_indicator_enabled')

      if (delayEnabled === 'true') {
        const minDelay = parseInt(await this.db.getConfig('response_delay_min') || '2')
        const maxDelay = parseInt(await this.db.getConfig('response_delay_max') || '5')

        // Calcular retraso aleatorio entre min y max
        const delay = Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay

        console.log(`‚è±Ô∏è Aplicando retraso de ${delay} segundos`)

        // Mostrar indicador de escritura si est√° habilitado
        if (typingEnabled === 'true') {
          await this.sock.sendPresenceUpdate('composing', to)
          console.log(`‚úçÔ∏è Mostrando "escribiendo..." a ${to}`)
        }

        // Esperar el tiempo configurado
        await new Promise(resolve => setTimeout(resolve, delay * 1000))

        // Detener indicador de escritura
        if (typingEnabled === 'true') {
          await this.sock.sendPresenceUpdate('paused', to)
        }
      }
    } catch (error) {
      console.error('Error aplicando timing de respuesta:', error)
      // Continuar sin retraso si hay error
    }
  }

  async downloadMediaMessage(message) {
    if (!this.sock) {
      throw new Error('WhatsApp no est√° conectado')
    }

    try {
      // Usar la API correcta de Baileys para descargar media
      const stream = await downloadContentFromMessage(message, 'image')

      // Convertir stream a buffer
      const chunks = []
      for await (const chunk of stream) {
        chunks.push(chunk)
      }

      const buffer = Buffer.concat(chunks)
      console.log('‚úÖ Imagen descargada exitosamente, tama√±o:', buffer.length, 'bytes')
      return buffer
    } catch (error) {
      console.error('Error descargando media:', error)
      throw error
    }
  }

  async getCustomerName(phoneNumber) {
    // Primero verificar si tenemos el nombre guardado en conversationData
    const conversationData = this.getConversationData(phoneNumber)
    if (conversationData && conversationData.customer_name) {
      return conversationData.customer_name
    }

    // Si no, intentar obtener nombre del contacto de WhatsApp
    try {
      const contact = await this.sock?.onWhatsApp(phoneNumber)
      const contactName = contact?.[0]?.notify

      // Si el nombre del contacto es diferente al n√∫mero, usarlo
      if (contactName && contactName !== phoneNumber.replace('@s.whatsapp.net', '')) {
        return contactName
      }

      // Si no hay nombre del contacto, retornar null para solicitar nombre
      return null
    } catch (error) {
      return null
    }
  }

  // M√©todo para solicitar nombre al cliente (con reconocimiento de clientes recurrentes)
  async askForCustomerName(phoneNumber) {
    // Verificar si es un cliente recurrente
    const clienteInfo = await this.getClienteRecurrenteInfo(phoneNumber)

    if (clienteInfo) {
      // Cliente recurrente - saludo personalizado
      const saludoPersonalizado = await this.generarSaludoPersonalizado(clienteInfo)
      await this.sendMessage(phoneNumber, saludoPersonalizado)

      // Establecer estado con informaci√≥n del cliente
      this.setConversationState(phoneNumber, this.STATES.BROWSING, {
        customer_name: clienteInfo.cliente_nombre,
        cliente_nivel: clienteInfo.nivel_cliente,
        es_recurrente: true
      })
    } else {
      // Cliente nuevo - usar mensaje de bienvenida personalizado
      const welcomeMessage = await this.getWelcomeMessage()

      await this.sendMessage(phoneNumber, welcomeMessage)
      this.setConversationState(phoneNumber, this.STATES.ASKING_NAME)
    }
  }

  // Obtener informaci√≥n de cliente recurrente
  async getClienteRecurrenteInfo(phoneNumber) {
    if (!this.sales) return null

    try {
      return await this.sales.getClienteInfo(phoneNumber)
    } catch (error) {
      console.error('Error obteniendo info de cliente recurrente:', error)
      return null
    }
  }

  // Generar saludo personalizado para cliente recurrente
  async generarSaludoPersonalizado(clienteInfo) {
    const { cliente_nombre, nivel_cliente, total_pedidos, categoria_favorita } = clienteInfo
    const businessName = await this.getBusinessName()

    let emoji = 'üòä'
    let nivelTexto = ''

    switch (nivel_cliente) {
      case 'VIP':
        emoji = 'üëë'
        nivelTexto = `¬°Nuestro cliente VIP de ${businessName}!`
        break
      case 'Frecuente':
        emoji = '‚≠ê'
        nivelTexto = `¬°Uno de nuestros clientes frecuentes de ${businessName}!`
        break
      case 'Recurrente':
        emoji = 'üéâ'
        nivelTexto = `¬°Qu√© gusto verte de nuevo en ${businessName}!`
        break
      default:
        emoji = 'üòä'
        nivelTexto = `¬°Bienvenido de vuelta a ${businessName}!`
    }

    return `${emoji} ¬°Hola ${cliente_nombre}! ${nivelTexto}

Es un placer tenerte aqu√≠ nuevamente. Veo que ya tienes ${total_pedidos} ${total_pedidos === 1 ? 'pedido' : 'pedidos'} con nosotros${categoria_favorita ? ` y que te gusta mucho la categor√≠a de ${categoria_favorita}` : ''}.

¬øEn qu√© puedo ayudarte hoy? üõçÔ∏è`
  }

  // M√©todo para procesar el nombre recibido
  async processReceivedName(phoneNumber, messageText) {
    // Extraer el nombre del mensaje (primera palabra o frase corta)
    const name = messageText.trim().split(' ')[0].replace(/[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]/g, '')

    if (name && name.length > 1) {
      // Guardar nombre en conversationData
      this.setConversationState(phoneNumber, this.STATES.BROWSING, {
        customer_name: name
      })

      // üé≠ Mensaje de confirmaci√≥n personalizado usando perfil + categor√≠as
      console.log(`üé≠ GENERANDO confirmaci√≥n personalizada para: ${name}`)

      // Obtener categor√≠as reales del inventario
      const categorias = await this.inventory.getCategories()
      const categoriasTexto = categorias.length > 0 ? categorias.join(', ') : 'productos variados'

      const confirmMessage = await this.gemini.generateSalesResponse(
        `Confirma que recibiste el nombre ${name} del cliente. Dale una bienvenida BREVE y PROFESIONAL mencionando que tienes los mejores productos. Luego menciona las categor√≠as disponibles: ${categoriasTexto}. Pregunta qu√© le interesa. M√°ximo 3-4 l√≠neas.`,
        name,
        [], // No necesitamos inventario completo para confirmaci√≥n
        'asking_name',
        []
      )

      await this.sendMessage(phoneNumber, confirmMessage)
      this.addToHistory(phoneNumber, 'assistant', confirmMessage)
      return name
    } else {
      // Si el nombre no es v√°lido, pedir de nuevo
      const retryMessage = `Disculpa, no pude entender tu nombre correctamente.

¬øPodr√≠as decirme solo tu nombre, por favor? Por ejemplo: "Mar√≠a" o "Juan" üòä`

      await this.sendMessage(phoneNumber, retryMessage)
      return null
    }
  }

  async logMessage(phoneNumber, message, type) {
    // Aqu√≠ podr√≠as guardar en base de datos para estad√≠sticas
    // Por ahora solo incrementamos el contador
    if (type === 'recibido') {
      this.messageCount++
    }
  }

  getTodayMessagesCount() {
    return this.messageCount
  }

  getConnectionStatus() {
    return this.isConnected ? 'connected' : 'disconnected'
  }

  // Validaciones din√°micas sin hardcodeo
  validateProductMention(message, inventory) {
    const messageLower = message.toLowerCase()
    const mentionedProducts = []

    for (const product of inventory) {
      const productNameLower = product.nombre.toLowerCase()
      const categoryLower = product.categoria?.toLowerCase() || ''

      // Buscar por nombre completo o parcial
      if (messageLower.includes(productNameLower) ||
          productNameLower.includes(messageLower.trim())) {
        mentionedProducts.push({
          id: product.id,
          name: product.nombre,
          price: product.precio,
          confidence: 'high'
        })
      }
      // Buscar por categor√≠a
      else if (categoryLower && messageLower.includes(categoryLower)) {
        mentionedProducts.push({
          id: product.id,
          name: product.nombre,
          price: product.precio,
          confidence: 'medium'
        })
      }
    }

    return mentionedProducts
  }

  validateQuantityMention(message) {
    // Buscar n√∫meros en el mensaje
    const numberMatches = message.match(/\d+/g)
    if (numberMatches) {
      const quantity = parseInt(numberMatches[0])
      return quantity > 0 && quantity <= 100 ? quantity : 0
    }

    // Buscar palabras que indican cantidad
    const quantityWords = {
      'un': 1, 'una': 1, 'uno': 1,
      'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5,
      'seis': 6, 'siete': 7, 'ocho': 8, 'nueve': 9, 'diez': 10
    }

    const messageLower = message.toLowerCase()
    for (const [word, num] of Object.entries(quantityWords)) {
      if (messageLower.includes(word)) {
        return num
      }
    }

    return 0
  }

  validateExplicitConfirmation(message) {
    const confirmationPhrases = [
      's√≠ confirmo', 'si confirmo', 'confirmo el pedido', 'confirmo',
      's√≠, confirmo', 'si, confirmo', 'acepto el pedido', 'acepto',
      'procede con el pedido', 'procede', 'est√° bien, confirmo',
      'ok, confirmo', 'dale, confirmo', 's√≠, est√° bien'
    ]

    const messageLower = message.toLowerCase().trim()

    return confirmationPhrases.some(phrase =>
      messageLower === phrase ||
      messageLower.includes(phrase)
    )
  }

  validatePurchaseIntent(message) {
    const purchaseKeywords = [
      'quiero comprar', 'quiero', 'me llevo', 'compro',
      'necesito', 'busco', 'me interesa comprar',
      'quisiera comprar', 'voy a comprar', 'puedo comprar'
    ]

    const messageLower = message.toLowerCase()

    return purchaseKeywords.some(keyword =>
      messageLower.includes(keyword)
    )
  }

  isVagueResponse(message) {
    const vagueResponses = [
      'si', 's√≠', 'ok', 'okay', 'bien', 'bueno', 'dale',
      'ya', 'aja', 'aj√°', 'mmm', 'uhm', 'claro', 'perfecto'
    ]

    const messageLower = message.toLowerCase().trim()

    return vagueResponses.includes(messageLower) || messageLower.length < 3
  }

  // M√âTODO PARA GENERAR SALUDO PERSONALIZADO SEG√öN HISTORIAL DEL CLIENTE
  async generatePersonalizedGreeting(from, customerName) {
    try {
      const businessName = await this.getBusinessName()

      // Obtener informaci√≥n del cliente desde estad√≠sticas
      const clienteInfo = await this.sales.db.get(
        'SELECT * FROM clientes_recurrentes WHERE cliente_whatsapp = ?',
        [from]
      )

      if (!clienteInfo || clienteInfo.total_compras === 0) {
        // Cliente nuevo - usar perfil personalizado
        console.log(`üé≠ GENERANDO saludo personalizado para cliente nuevo: ${customerName}`)
        const personalizedGreeting = await this.gemini.generateSalesResponse(
          `Saluda al cliente nuevo ${customerName} y muestra productos destacados`,
          customerName,
          [], // No necesitamos inventario completo para el saludo
          'initial',
          []
        )
        return personalizedGreeting
      }

      // Cliente recurrente - generar saludo seg√∫n ranking
      let saludo = `¬°Hola de nuevo ${customerName}! üòä`
      let emoji = ''
      let mensaje = ''

      if (clienteInfo.total_compras >= 10) {
        // Cliente VIP (10+ compras)
        emoji = 'üëë'
        mensaje = `${emoji} ¬°Nuestro cliente VIP de ${businessName} est√° de vuelta! Gracias por tu fidelidad. Te muestro nuestros productos m√°s cotizados:`
      } else if (clienteInfo.total_compras >= 5) {
        // Cliente Frecuente (5-9 compras)
        emoji = '‚≠ê'
        mensaje = `${emoji} ¬°Qu√© gusto verte de nuevo en ${businessName}, cliente estrella! Te muestro nuestros productos m√°s cotizados:`
      } else if (clienteInfo.total_compras >= 2) {
        // Cliente Recurrente (2-4 compras)
        emoji = 'ü§ù'
        mensaje = `${emoji} ¬°Bienvenido de vuelta a ${businessName}! Me alegra que regreses. Te muestro nuestros productos m√°s cotizados:`
      } else {
        // Cliente con 1 compra
        emoji = 'üòä'
        mensaje = `${emoji} ¬°Qu√© bueno verte de nuevo en ${businessName}! Te muestro nuestros productos m√°s cotizados:`
      }

      return `${saludo} ${mensaje}`

    } catch (error) {
      console.error('Error generando saludo personalizado:', error)
      const businessName = await this.getBusinessName()
      return `¬°Hola ${customerName}! üòä Bienvenido a ${businessName}. Te muestro nuestros productos m√°s cotizados:`
    }
  }

  // M√âTODOS PARA FILTROS DE MENSAJES Y CONFIGURACIONES
  async shouldProcessMessage(messageText, currentState, from) {
    try {
      // Verificar horario de atenci√≥n
      const withinBusinessHours = await this.isWithinBusinessHours(from)
      if (!withinBusinessHours) {
        return false
      }

      // Aplicar filtros de mensajes
      const passesFilters = await this.passesMessageFilters(messageText, currentState)
      return passesFilters

    } catch (error) {
      console.error('Error validando mensaje:', error)
      return true // En caso de error, procesar el mensaje
    }
  }

  // NUEVO M√âTODO: Filtros inteligentes que consideran la intenci√≥n detectada
  async shouldProcessMessageIntelligent(messageText, currentState, from, intent) {
    try {
      // Verificar horario de atenci√≥n
      const withinBusinessHours = await this.isWithinBusinessHours(from)
      if (!withinBusinessHours) {
        return false
      }

      // üîê EXCEPCI√ìN ESPECIAL: Activaci√≥n de modo administrativo
      if (this.isAdminModeActivation(messageText)) {
        console.log('‚úÖ Mensaje procesado por activaci√≥n de modo administrativo')
        return true
      }

      // üîê EXCEPCI√ìN ESPECIAL: Usuario ya en modo administrativo
      if (this.isAdminState(currentState)) {
        console.log('‚úÖ Mensaje procesado por estar en modo administrativo')
        return true
      }

      // üîê EXCEPCI√ìN ESPECIAL: Comandos administrativos detectados por Gemini
      if (intent && intent.suggested_response_type === 'admin_command') {
        console.log('‚úÖ Mensaje procesado por comando administrativo detectado')
        return true
      }

      // Si Gemini detect√≥ una intenci√≥n v√°lida con alta confianza, procesar siempre
      if (intent && intent.confidence === 'high' &&
          ['browsing', 'purchase_intent', 'asking_question', 'greeting'].includes(intent.intent)) {
        console.log('‚úÖ Mensaje procesado por intenci√≥n v√°lida detectada:', intent.intent)
        return true
      }

      // Si hay productos mencionados, procesar siempre
      if (intent && intent.products_mentioned && intent.products_mentioned.length > 0) {
        console.log('‚úÖ Mensaje procesado por productos mencionados')
        return true
      }

      // Para el resto, aplicar filtros normales
      const passesFilters = await this.passesMessageFilters(messageText, currentState)
      return passesFilters

    } catch (error) {
      console.error('Error validando mensaje inteligente:', error)
      return true // En caso de error, procesar el mensaje
    }
  }

  async isWithinBusinessHours(from) {
    try {
      const scheduleEnabled = await this.db.getConfig('schedule_enabled')
      if (scheduleEnabled !== 'true') {
        return true // Si no est√° habilitado, siempre est√° dentro del horario
      }

      const now = new Date()
      const currentTime = now.toTimeString().slice(0, 5) // HH:MM format

      const startTime = await this.db.getConfig('schedule_start_time') || '09:00'
      const endTime = await this.db.getConfig('schedule_end_time') || '17:00'

      if (currentTime >= startTime && currentTime <= endTime) {
        return true
      } else {
        // Enviar mensaje autom√°tico fuera de horario
        const outOfHoursMessage = await this.db.getConfig('schedule_out_of_hours_message') ||
          'Gracias por contactarnos. Te responderemos en nuestro horario de atenci√≥n.'

        // Solo enviar si no hemos enviado este mensaje recientemente
        const lastMessage = this.getLastMessage(from)
        if (!lastMessage || lastMessage !== outOfHoursMessage) {
          await this.sendMessage(from, outOfHoursMessage)
          this.addToHistory(from, 'assistant', outOfHoursMessage)
        }

        return false
      }
    } catch (error) {
      console.error('Error verificando horario:', error)
      return true
    }
  }

  async passesMessageFilters(messageText, currentState) {
    try {
      // Si estamos en un estado espec√≠fico de conversaci√≥n (no inicial), no aplicar filtros estrictos
      if (currentState !== this.STATES.INITIAL) {
        // Para conversaciones ya establecidas, solo filtrar contenido realmente problem√°tico
        const filterEmojisEnabled = await this.db.getConfig('filter_ignore_emojis_enabled')

        if (filterEmojisEnabled === 'true') {
          if (this.isOnlyEmojisOrStickers(messageText)) {
            console.log('üö´ Mensaje filtrado: solo contiene emojis/stickers')
            return false
          }
        }

        return true // Permitir todos los dem√°s mensajes en conversaciones establecidas
      }

      // Solo para conversaciones nuevas (INITIAL), aplicar filtros estrictos
      const filterGreetingsEnabled = await this.db.getConfig('filter_greetings_only_enabled')
      const filterEmojisEnabled = await this.db.getConfig('filter_ignore_emojis_enabled')

      // Filtro: Solo responder a saludos/preguntas (SOLO para conversaciones nuevas)
      if (filterGreetingsEnabled === 'true') {
        if (!this.isGreetingOrQuestion(messageText)) {
          console.log('üö´ Mensaje filtrado: no es saludo ni pregunta (conversaci√≥n nueva)')
          return false
        }
      }

      // Filtro: Ignorar mensajes con solo emojis/stickers
      if (filterEmojisEnabled === 'true') {
        if (this.isOnlyEmojisOrStickers(messageText)) {
          console.log('üö´ Mensaje filtrado: solo contiene emojis/stickers')
          return false
        }
      }

      return true
    } catch (error) {
      console.error('Error aplicando filtros:', error)
      return true
    }
  }

  isGreetingOrQuestion(message) {
    const greetings = [
      'hola', 'hello', 'hi', 'buenas', 'buenos d√≠as', 'buenas tardes', 'buenas noches',
      'saludos', 'que tal', 'qu√© tal', 'como estas', 'c√≥mo est√°s'
    ]

    const questionWords = [
      '?', 'que', 'qu√©', 'como', 'c√≥mo', 'cuando', 'cu√°ndo', 'donde', 'd√≥nde',
      'por que', 'por qu√©', 'para que', 'para qu√©', 'cuanto', 'cu√°nto',
      'cual', 'cu√°l', 'quiero', 'necesito', 'busco', 'me interesa'
    ]

    // Palabras que indican solicitud/pregunta (aunque no tengan ?)
    const requestWords = [
      'podr√≠as', 'podrias', 'puedes', 'puedas', 'mostrar', 'mostrarme', 'muestra', 'muestrame',
      'ense√±ar', 'ense√±arme', 'ense√±a', 'ense√±ame', 'ver', 'mirar', 'revisar', 'conocer',
      'saber', 'informaci√≥n', 'informacion', 'detalles', 'precio', 'precios',
      'disponible', 'disponibles', 'stock', 'tienes', 'tienen', 'hay',
      'venden', 'vendes', 'ofrecen', 'ofreces', 'manejan', 'manejas',
      'dame', 'dime', 'enviame', 'env√≠ame', 'comprar', 'compro', 'adquirir',
      'conseguir', 'obtener', 'solicitar', 'pedir', 'solicito', 'pido'
    ]

    const messageLower = message.toLowerCase()

    // Verificar saludos
    if (greetings.some(greeting => messageLower.includes(greeting))) {
      return true
    }

    // Verificar palabras de pregunta tradicionales
    if (questionWords.some(question => messageLower.includes(question))) {
      return true
    }

    // Verificar palabras de solicitud/petici√≥n (NUEVA L√ìGICA)
    if (requestWords.some(request => messageLower.includes(request))) {
      return true
    }

    // Verificar patrones de pregunta sin ? (NUEVA L√ìGICA)
    const questionPatterns = [
      /^(me|nos)\s+(puedes|podrias|podr√≠as)/,  // "me puedes", "nos podr√≠as"
      /^(puedes|podrias|podr√≠as)/,             // "puedes mostrar"
      /\b(mostrar|ense√±ar|ver)\b/,             // contiene "mostrar", "ense√±ar", "ver"
      /\b(precio|precios|costo|costos)\b/,     // pregunta por precios
      /\b(disponible|disponibles|stock)\b/,    // pregunta por disponibilidad
      /\b(tienes|tienen|hay)\b/                // pregunta por existencia
    ]

    return questionPatterns.some(pattern => pattern.test(messageLower))
  }

  isOnlyEmojisOrStickers(message) {
    // Regex para detectar solo emojis, espacios y caracteres especiales
    const emojiRegex = /^[\s\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]*$/u

    // Tambi√©n considerar mensajes muy cortos sin letras
    const hasLetters = /[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë]/.test(message)

    return emojiRegex.test(message) || (!hasLetters && message.trim().length < 3)
  }

  getLastMessage(from) {
    const history = this.conversationHistory.get(from) || []
    const lastAssistantMessage = history.filter(msg => msg.role === 'assistant').pop()
    return lastAssistantMessage ? lastAssistantMessage.content : null
  }

  // Detectar solicitudes de categor√≠as espec√≠ficas
  async detectarSolicitudCategoria(messageText) {
    try {
      const messageLower = messageText.toLowerCase()

      // Obtener categor√≠as disponibles
      const categorias = await this.inventory.getCategories()

      // Patrones de solicitud de categor√≠a
      const patronesSolicitud = [
        /(?:muestra|ense√±a|ver|mira|busco|quiero|necesito|tienes|hay)\s*(?:algo\s*(?:de|en))?\s*([a-z√°√©√≠√≥√∫√±]+)/i,
        /(?:que|qu√©)\s*(?:tienes|hay|vendes|manejas)\s*(?:de|en)?\s*([a-z√°√©√≠√≥√∫√±]+)/i,
        /([a-z√°√©√≠√≥√∫√±]+)\s*(?:por favor|porfavor)?$/i,
        /(?:categoria|categor√≠a)\s*(?:de)?\s*([a-z√°√©√≠√≥√∫√±]+)/i
      ]

      // Buscar coincidencias con patrones
      for (const patron of patronesSolicitud) {
        const match = messageLower.match(patron)
        if (match && match[1]) {
          const palabraClave = match[1].trim()

          // Buscar coincidencia con categor√≠as existentes
          for (const categoria of categorias) {
            const categoriaLower = categoria.toLowerCase()

            // Coincidencia exacta
            if (categoriaLower === palabraClave) {
              return categoria
            }

            // Coincidencia parcial m√°s estricta
            // Solo si la palabra clave tiene al menos 4 caracteres y coincide significativamente
            if (palabraClave.length >= 4) {
              // La categor√≠a contiene la palabra clave completa
              if (categoriaLower.includes(palabraClave)) {
                return categoria
              }
              // La palabra clave contiene la categor√≠a completa (ej: "electronica" contiene "electro")
              if (palabraClave.includes(categoriaLower) && categoriaLower.length >= 4) {
                return categoria
              }
            }

            // Coincidencias espec√≠ficas para categor√≠as comunes
            if (this.esCategoriaRelacionada(palabraClave, categoriaLower)) {
              return categoria
            }
          }
        }
      }

      return null
    } catch (error) {
      console.error('Error detectando solicitud de categor√≠a:', error)
      return null
    }
  }

  // Verificar si una palabra clave est√° relacionada con una categor√≠a
  esCategoriaRelacionada(palabraClave, categoria) {
    const relaciones = {
      'ropa': ['moda', 'vestimenta', 'clothing'],
      'zapatos': ['calzado', 'zapatillas', 'deportes'],
      'zapatillas': ['deportes', 'calzado', 'zapatos'],
      'tecnologia': ['electronica', 'electr√≥nica', 'tech'],
      'electronica': ['tecnologia', 'tecnolog√≠a', 'tech'],
      'casa': ['hogar', 'decoracion', 'decoraci√≥n'],
      'hogar': ['casa', 'decoracion', 'decoraci√≥n'],
      'decoracion': ['hogar', 'casa', 'deco'],
      'deporte': ['deportes', 'fitness', 'gym'],
      'deportes': ['deporte', 'fitness', 'gym'],
      'lujo': ['premium', 'exclusivo', 'luxury'],
      'premium': ['lujo', 'exclusivo', 'luxury']
    }

    // Verificar relaciones bidireccionales
    if (relaciones[palabraClave]) {
      return relaciones[palabraClave].includes(categoria)
    }

    // Verificar relaciones inversas
    for (const [key, values] of Object.entries(relaciones)) {
      if (values.includes(palabraClave) && key === categoria) {
        return true
      }
    }

    return false
  }

  // Detectar si el cliente solicita la lista de categor√≠as
  async esSolicitudListaCategorias(messageText) {
    const messageLower = messageText.toLowerCase()

    // Patrones que indican solicitud de lista de categor√≠as
    const patronesListaCategorias = [
      /(?:que|qu√©)\s*(?:otras?)?\s*categor√≠as?\s*(?:tienes|hay|manejas|vendes)/i,
      /(?:cuales|cu√°les)\s*(?:son\s*las\s*)?categor√≠as?\s*(?:tienes|hay|manejas|vendes)/i,
      /(?:muestra|ense√±a|dime)\s*(?:todas\s*las\s*)?categor√≠as?\s*(?:que\s*tienes|disponibles)/i,
      /(?:lista|listado)\s*(?:de\s*)?categor√≠as?/i,
      /(?:todas\s*las\s*)?categor√≠as?\s*(?:disponibles|que\s*tienes)/i,
      /(?:opciones|alternativas)\s*(?:de\s*categor√≠as?|disponibles)/i
    ]

    return patronesListaCategorias.some(patron => patron.test(messageLower))
  }

  // Mostrar lista completa de categor√≠as
  async mostrarListaCategorias(from, customerName) {
    try {
      console.log(`üìã Mostrando lista de categor√≠as a ${from}`)

      // Obtener todas las categor√≠as disponibles
      const categorias = await this.inventory.getCategories()

      if (!categorias || categorias.length === 0) {
        await this.sendMessage(from, `${customerName}, disculpa pero no tengo categor√≠as disponibles en este momento. üòÖ`)
        return
      }

      // Crear mensaje con todas las categor√≠as
      let mensaje = `¬°Perfecto ${customerName}! üòä\n\n`
      mensaje += `üè™ **Estas son todas nuestras categor√≠as disponibles:**\n\n`

      categorias.forEach((categoria, index) => {
        mensaje += `${index + 1}. üè∑Ô∏è **${categoria}**\n`
      })

      mensaje += `\nüí° **¬øC√≥mo funciona?**\n`
      mensaje += `Solo dime el nombre de la categor√≠a que te interesa y te mostrar√© todos los productos disponibles.\n\n`
      mensaje += `Por ejemplo: *"Mu√©strame Electr√≥nica"* o *"Qu√© tienes en Deportes"*\n\n`
      mensaje += `¬øCu√°l categor√≠a te llama la atenci√≥n? üõçÔ∏è`

      await this.sendMessage(from, mensaje)

    } catch (error) {
      console.error('Error mostrando lista de categor√≠as:', error)
      await this.sendMessage(from, `${customerName}, disculpa pero hubo un error al cargar las categor√≠as. Por favor intenta de nuevo. üòÖ`)
    }
  }

  // üé≠ NUEVO M√âTODO: Manejar respuestas emocionales
  async handleEmotionalResponse(from, messageText, intent, customerName, currentState) {
    try {
      console.log(`üé≠ MANEJANDO respuesta emocional para ${customerName}: ${intent.emotional_state}`)

      // Verificar si necesita respuesta emocional
      if (!intent.needs_emotional_response) {
        console.log('üé≠ No necesita respuesta emocional, usando respuesta general')
        await this.handleGeneralResponse(from, messageText, customerName, [], currentState, [])
        return
      }

      // Generar respuesta emocional emp√°tica
      const emotionalResponse = await this.gemini.generateEmotionalResponse(
        messageText,
        customerName,
        intent.emotional_state,
        intent.emotional_keywords || [],
        currentState
      )

      // Enviar respuesta emocional
      await this.sendMessage(from, emotionalResponse)
      this.addToHistory(from, 'assistant', emotionalResponse)

      // üéØ ESTABLECER ESTADO TEMPORAL EMOTIONAL_SUPPORT
      this.setConversationState(from, this.STATES.EMOTIONAL_SUPPORT, {
        emotional_state: intent.emotional_state,
        emotional_start_time: Date.now(),
        previous_state: currentState,
        emotional_interaction_count: 1
      })

      // ‚è∞ CONFIGURAR TIMEOUT AUTOM√ÅTICO (2 minutos)
      this.setEmotionalTimeout(from)

      console.log(`üé≠ Cliente ${customerName} en estado emocional: ${intent.emotional_state}`)

    } catch (error) {
      console.error('Error manejando respuesta emocional:', error)
      // Fallback a respuesta general si falla
      await this.handleGeneralResponse(from, messageText, customerName, [], currentState, [])
    }
  }

  // üé≠ Configurar timeout autom√°tico para estado emocional
  setEmotionalTimeout(from) {
    // Limpiar timeout existente si existe
    if (this.emotionalTimeouts.has(from)) {
      clearTimeout(this.emotionalTimeouts.get(from))
    }

    // Configurar nuevo timeout de 2 minutos
    const timeout = setTimeout(() => {
      console.log(`‚è∞ Timeout emocional para ${from} - regresando a BROWSING`)
      this.returnFromEmotionalState(from)
    }, 2 * 60 * 1000) // 2 minutos

    this.emotionalTimeouts.set(from, timeout)
  }

  // üé≠ Regresar del estado emocional a ventas
  async returnFromEmotionalState(from) {
    try {
      const conversationData = this.getConversationData(from)
      const previousState = conversationData.previous_state || this.STATES.BROWSING

      // Limpiar timeout
      if (this.emotionalTimeouts.has(from)) {
        clearTimeout(this.emotionalTimeouts.get(from))
        this.emotionalTimeouts.delete(from)
      }

      // Regresar al estado anterior (generalmente BROWSING)
      this.setConversationState(from, previousState, {
        ...conversationData,
        emotional_state: null,
        emotional_start_time: null,
        previous_state: null,
        emotional_interaction_count: null
      })

      console.log(`üé≠ Cliente ${from} regres√≥ de estado emocional a ${previousState}`)

    } catch (error) {
      console.error('Error regresando de estado emocional:', error)
      // Fallback seguro
      this.setConversationState(from, this.STATES.BROWSING)
    }
  }

  // üé≠ Verificar si el cliente est√° en estado emocional y manejar transici√≥n
  async checkEmotionalStateTransition(from, intent, currentState) {
    if (currentState === this.STATES.EMOTIONAL_SUPPORT) {
      const conversationData = this.getConversationData(from)
      const interactionCount = conversationData.emotional_interaction_count || 0

      // Si ya tuvo 2 interacciones emocionales O la nueva intenci√≥n no es emocional
      if (interactionCount >= 2 || !intent.needs_emotional_response) {
        console.log(`üé≠ Transici√≥n autom√°tica: ${interactionCount >= 2 ? 'm√°ximo alcanzado' : 'intenci√≥n no emocional'}`)
        await this.returnFromEmotionalState(from)
        return true // Indica que hubo transici√≥n
      } else {
        // Incrementar contador de interacciones emocionales
        this.setConversationState(from, this.STATES.EMOTIONAL_SUPPORT, {
          ...conversationData,
          emotional_interaction_count: interactionCount + 1
        })
        return false // Contin√∫a en estado emocional
      }
    }
    return false // No est√° en estado emocional
  }
}
export default WhatsAppService
